[{"/home/talat/IdeaProjects/TakeNote/frontend/src/index.js":"1","/home/talat/IdeaProjects/TakeNote/frontend/src/App.js":"2","/home/talat/IdeaProjects/TakeNote/frontend/src/reportWebVitals.js":"3","/home/talat/IdeaProjects/TakeNote/frontend/src/i18n/i18n.js":"4","/home/talat/IdeaProjects/TakeNote/frontend/src/Home.js":"5","/home/talat/IdeaProjects/TakeNote/frontend/src/ClientEdit.js":"6","/home/talat/IdeaProjects/TakeNote/frontend/src/ClientList.js":"7","/home/talat/IdeaProjects/TakeNote/frontend/src/state/store.js":"8","/home/talat/IdeaProjects/TakeNote/frontend/src/enums/LanguagesEnum.js":"9","/home/talat/IdeaProjects/TakeNote/frontend/src/Themes/DefaultTheme.js":"10","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppContent.js":"11","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/LeftMenu.js":"12","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppNavbar.js":"13","/home/talat/IdeaProjects/TakeNote/frontend/src/state/reducers/index.js":"14","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppContentStyle.js":"15","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/LeftMenuStyle.js":"16","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/AddBookModal.js":"17","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppDetailedContent.js":"18","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/AddCategoryModal.js":"19","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppNavbarStyle.js":"20","/home/talat/IdeaProjects/TakeNote/frontend/src/state/reducers/AppReducers.js":"21","/home/talat/IdeaProjects/TakeNote/frontend/src/enums/NotificationTypes.js":"22","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/DialogTitle.js":"23","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/Notification.js":"24","/home/talat/IdeaProjects/TakeNote/frontend/src/state/actionTypes.js":"25","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AddBookModalStyle.js":"26","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppDetailedContentStyle.js":"27","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/StickyNote.js":"28","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/TakeNoteArea.js":"29","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/ColorSelectorModal.js":"30","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/StickyNoteStyle.js":"31","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/NoteDetailModal.js":"32","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/TakeNoteAreaStyle.js":"33","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/ColorSelectorModalStyle.js":"34","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/NoteDetailModalStyle.js":"35"},{"size":365,"mtime":1633462782111,"results":"36","hashOfConfig":"37"},{"size":1029,"mtime":1633462782111,"results":"38","hashOfConfig":"37"},{"size":362,"mtime":1631235929000,"results":"39","hashOfConfig":"37"},{"size":804,"mtime":1632675440268,"results":"40","hashOfConfig":"37"},{"size":792,"mtime":1639587153917,"results":"41","hashOfConfig":"37"},{"size":2649,"mtime":1632677435138,"results":"42","hashOfConfig":"37"},{"size":2437,"mtime":1632677435214,"results":"43","hashOfConfig":"37"},{"size":113,"mtime":1633462782111,"results":"44","hashOfConfig":"37"},{"size":93,"mtime":1632675440280,"results":"45","hashOfConfig":"37"},{"size":3295,"mtime":1639424296378,"results":"46","hashOfConfig":"37"},{"size":424,"mtime":1639337314505,"results":"47","hashOfConfig":"37"},{"size":4242,"mtime":1635358356951,"results":"48","hashOfConfig":"37"},{"size":10518,"mtime":1639587153877,"results":"49","hashOfConfig":"37"},{"size":136,"mtime":1633462782111,"results":"50","hashOfConfig":"37"},{"size":265,"mtime":1633929701001,"results":"51","hashOfConfig":"37"},{"size":2787,"mtime":1635358356951,"results":"52","hashOfConfig":"37"},{"size":3915,"mtime":1635876137041,"results":"53","hashOfConfig":"37"},{"size":3289,"mtime":1639505452952,"results":"54","hashOfConfig":"37"},{"size":3971,"mtime":1637441266838,"results":"55","hashOfConfig":"37"},{"size":2756,"mtime":1633465827618,"results":"56","hashOfConfig":"37"},{"size":739,"mtime":1639337314533,"results":"57","hashOfConfig":"37"},{"size":149,"mtime":1635876137041,"results":"58","hashOfConfig":"37"},{"size":872,"mtime":1635358356951,"results":"59","hashOfConfig":"37"},{"size":1447,"mtime":1637441266838,"results":"60","hashOfConfig":"37"},{"size":209,"mtime":1639337314533,"results":"61","hashOfConfig":"37"},{"size":623,"mtime":1635358356951,"results":"62","hashOfConfig":"37"},{"size":1201,"mtime":1633929702069,"results":"63","hashOfConfig":"37"},{"size":7931,"mtime":1639505452952,"results":"64","hashOfConfig":"37"},{"size":22771,"mtime":1639424296374,"results":"65","hashOfConfig":"37"},{"size":3977,"mtime":1639337314525,"results":"66","hashOfConfig":"37"},{"size":833,"mtime":1635358356951,"results":"67","hashOfConfig":"37"},{"size":16327,"mtime":1639587153917,"results":"68","hashOfConfig":"37"},{"size":1530,"mtime":1639424296374,"results":"69","hashOfConfig":"37"},{"size":426,"mtime":1635358356951,"results":"70","hashOfConfig":"37"},{"size":1341,"mtime":1639507823250,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8tzvq2",{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/talat/IdeaProjects/TakeNote/frontend/src/index.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/App.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/reportWebVitals.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/i18n/i18n.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Home.js",["150","151","152","153","154"],"/home/talat/IdeaProjects/TakeNote/frontend/src/ClientEdit.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/ClientList.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/state/store.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/enums/LanguagesEnum.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Themes/DefaultTheme.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppContent.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Components/LeftMenu.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppNavbar.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/state/reducers/index.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppContentStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/LeftMenuStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/AddBookModal.js",["155"],"import React, {forwardRef, useImperativeHandle, useRef} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport AddBookModalStyle from \"../Styles/AddBookModalStyle\";\nimport {useTranslation} from \"react-i18next\";\nimport {FormControl, TextField} from \"@material-ui/core\";\nimport DialogTitle from \"./DialogTitle\";\nimport axios from \"axios\";\nimport {Notification} from \"./Notification\";\nimport NotificationTypes from \"../enums/NotificationTypes\";\n\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nexport const AddBookModal = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef() {\n                setOpen(true);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const [bookName, setBookName] = React.useState(null);\n    const {t} = useTranslation();\n    const classes = AddBookModalStyle();\n    const childRefBook = useRef();\n    const duration = 2000;\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setBookName(null);\n    };\n\n    const handleSaveBook = () => {\n        if (bookName !== null) {\n            axios.post('/books/addBook', {\n                bookName: bookName\n            }).then(function (response) {\n                childRefBook.current.handleClickOpenWithRef(duration, t('SuccessMessage'), NotificationTypes.success);\n                setTimeout(function () {\n                    handleClose();\n                }, duration);\n            }).catch(function (error) {\n                childRefBook.current.handleClickOpenWithRef(duration, t('ErrorMessage'), NotificationTypes.error);\n                setTimeout(function () {\n                    setOpen(false)\n                }, duration);\n            });\n        } else {\n            childRefBook.current.handleClickOpenWithRef(duration, t('NullValueCheck', {value: t('Book')}), NotificationTypes.warning);\n        }\n    }\n\n    const handleChange = (event) => {\n        setBookName(event.target.value);\n    };\n    return (\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" maxWidth={\"sm\"} fullWidth={true}\n                open={open} classes={{paperFullWidth: classes.paperFullWidth, paper: classes.paperFullWidthMargin}}>\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                {t('AddBook')}\n            </DialogTitle>\n            <DialogContent dividers>\n                <FormControl variant=\"outlined\" className={classes.addBookArea}>\n                    <TextField type={\"text\"} value={bookName} id=\"outlined-basic\" label={t('BookName')}\n                               variant=\"outlined\" onChange={handleChange}/>\n                </FormControl>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleSaveBook} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Save')}\n                    </Typography>\n                </Button>\n                <Button autoFocus onClick={handleClose} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Cancel')}\n                    </Typography>\n                </Button>\n            </DialogActions>\n            <Notification ref={childRefBook} duration={duration}/>\n        </Dialog>\n    );\n})\n\n","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppDetailedContent.js",["156"],"import React, {useEffect} from \"react\";\nimport clsx from \"clsx\";\nimport AppDetailedContentStyle from \"../Styles/AppDetailedContentStyle\";\nimport {useSelector} from \"react-redux\";\nimport Masonry, {ResponsiveMasonry} from \"react-responsive-masonry\"\nimport {Grid} from \"@material-ui/core\";\nimport StickyNote from \"./StickyNote\";\nimport TakeNoteArea from \"./TakeNoteArea\";\nimport DefaultTheme from \"../Themes/DefaultTheme\";\nimport axios from \"axios\";\n\nexport default function AppDetailedContent(props) {\n    const classes = AppDetailedContentStyle();\n    const leftMenuOpenState = useSelector(state => state.app.leftMenuOpenState);\n    const notesListPreview = useSelector(state => state.app.notesListPreview);\n    const [savedNoteList, setSavedNoteList] = React.useState([]);\n    useEffect(() => {\n        axios.get('/notes/getSavedNoteList').then(function (response) {\n            setSavedNoteList(response.data);\n        }).catch(function (error) {\n            console.log(error)\n        });\n    }, [])\n\n    useEffect(() => {\n        if (props.refreshData ) {\n            axios.get('/notes/getSavedNoteList').then(function (response) {\n                setSavedNoteList(response.data);\n            }).catch(function (error) {\n                console.log(error)\n            });        }\n    }, [props.refreshData]);\n\n\n    const handleNotesPreview = () => {\n        if (notesListPreview && savedNoteList.length !== 0) {\n            return (\n                <ResponsiveMasonry\n                    columnsCountBreakPoints={{250: 1, 500: 2, 750: 3, 1000: 4, 1250: 5, 1500: 6, 1750: 7}}\n                >\n                    <Masonry>\n                        {savedNoteList.map((item) => {\n                            return (\n                                <StickyNote color={item.color}\n                                            note={item.noteContent}\n                                            pageNumber={item.pageNumber}\n                                            noteId={item.id}\n                                />\n                            )\n                        })}\n                    </Masonry>\n                </ResponsiveMasonry>\n            )\n        } else {\n            return (\n                <Grid container spacing={2}>\n                    <Grid item lg={4} md={3} sm={2} xs={0}/>\n                    <Grid item lg={4} md={6} sm={8} xs={12}>\n                        {savedNoteList.length !== 0 && savedNoteList.map((item) => {\n                            return (\n                                <StickyNote color={item.color}\n                                            note={item.noteContent}\n                                            pageNumber={item.pageNumber}\n                                            noteId={item.id}\n                                />\n                            )\n                        })}\n                    </Grid>\n                    <Grid item lg={4} md={3} sm={2} xs={0}/>\n                </Grid>\n            )\n        }\n    }\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: leftMenuOpenState,\n                [classes.mainBlur]: leftMenuOpenState\n            })}\n        >\n            <TakeNoteArea/>\n            {handleNotesPreview()}\n        </main>\n    );\n\n}","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/AddCategoryModal.js",["157"],"import React, {forwardRef, useImperativeHandle, useRef} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport AddBookModalStyle from \"../Styles/AddBookModalStyle\";\nimport {useTranslation} from \"react-i18next\";\nimport {FormControl, TextField} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport DialogTitle from \"./DialogTitle\";\nimport NotificationTypes from \"../enums/NotificationTypes\";\nimport {Notification} from \"./Notification\";\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nexport const AddCategoryModal = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef() {\n                setOpen(true);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const [categoryName, setCategoryName] = React.useState(null);\n    const {t} = useTranslation();\n    const classes = AddBookModalStyle();\n    const childRefBook = useRef();\n    const duration = 2000;\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setCategoryName(null);\n    };\n\n    const handleSaveCategory = () => {\n        if (categoryName !== null) {\n            axios.post('/categories/addCategory', {\n                category: categoryName\n            }).then(function (response) {\n                childRefBook.current.handleClickOpenWithRef(duration, t('SuccessMessage'), NotificationTypes.success);\n                setTimeout(function () {\n                    handleClose();\n                }, duration);\n            }).catch(function (error) {\n                childRefBook.current.handleClickOpenWithRef(duration, t('ErrorMessage'), NotificationTypes.error);\n                setTimeout(function () {\n                    setOpen(false)\n                }, duration);\n            });\n        } else {\n            childRefBook.current.handleClickOpenWithRef(duration, t('NullValueCheck', {value: t('Book')}), NotificationTypes.warning);\n        }\n    }\n\n    const handleChange = (event) => {\n        setCategoryName(event.target.value);\n    };\n    return (\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" maxWidth={\"sm\"} fullWidth={true}\n                open={open} classes={{paperFullWidth: classes.paperFullWidth, paper: classes.paperFullWidthMargin}}>\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                {t('AddCategory')}\n            </DialogTitle>\n            <DialogContent dividers>\n                <FormControl variant=\"outlined\" className={classes.addBookArea}>\n                    <TextField type={\"text\"} value={categoryName} id=\"outlined-basic\" label={t('CategoryName')}\n                               variant=\"outlined\" onChange={handleChange}/>\n                </FormControl>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleSaveCategory} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Save')}\n                    </Typography>\n                </Button>\n                <Button autoFocus onClick={handleClose} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Cancel')}\n                    </Typography>\n                </Button>\n            </DialogActions>\n            <Notification ref={childRefBook} duration={duration}/>\n        </Dialog>\n    );\n})\n\n","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppNavbarStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/state/reducers/AppReducers.js",["158"],"import * as actionTypes from \"../actionTypes\"\n\nconst INITIAL_APP_STATE = {\n    title: \"First Screen\",\n    leftMenuOpenState: false,\n    notesListPreview: true,\n    notesRefresh: false\n};\n\nexport default (state = INITIAL_APP_STATE, action) => {\n    switch (action.type) {\n        case actionTypes.SET_PAGE_TITLE:\n            return {...state, title: action.payload}\n        case  actionTypes.LEFT_MENU_OPEN_STATE:\n            return {...state, leftMenuOpenState: action.payload}\n        case  actionTypes.NOTES_LIST_PREVIEW:\n            return {...state, notesListPreview: action.payload}\n        case  actionTypes.NOTES_REFRESH:\n            return {...state, notesRefresh: action.payload}\n        default:\n            return state;\n    }\n}","/home/talat/IdeaProjects/TakeNote/frontend/src/enums/NotificationTypes.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/DialogTitle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/Notification.js",["159","160"],"import AppContentStyle from \"../Styles/AppContentStyle\";\nimport React, {forwardRef, useImperativeHandle} from \"react\";\nimport {Snackbar} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\n\nexport const Notification = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef(duration, message, severity) {\n                setOpen(true);\n                setDuration(duration);\n                setMessage(message);\n                setSeverity(severity);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const [duration, setDuration] = React.useState(2000);\n    const [message, setMessage] = React.useState(\"\");\n    const [severity, setSeverity] = React.useState(\"\");\n    const classes = AppContentStyle();\n    const [state, setState] = React.useState({\n        vertical: 'top',\n        horizontal: 'center',\n    });\n\n    const {vertical, horizontal} = state;\n\n    const handleClick = (newState) => () => {\n        setState({open: true, ...newState});\n    };\n\n\n    return (\n        <Snackbar\n            autoHideDuration={duration}\n            anchorOrigin={{vertical, horizontal}}\n            open={open}\n            key={vertical + horizontal}\n        >\n            <Alert onClose={() => {\n                setOpen(false)\n            }} severity={severity}>\n                {message}\n            </Alert>\n        </Snackbar>\n    );\n})\n","/home/talat/IdeaProjects/TakeNote/frontend/src/state/actionTypes.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AddBookModalStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppDetailedContentStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Components/StickyNote.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Components/TakeNoteArea.js",["161","162","163"],"import {\n    Button,\n    ClickAwayListener,\n    Divider,\n    Grid,\n    InputBase,\n    Paper, Popover,\n    TextField,\n    Tooltip,\n    Typography\n} from \"@material-ui/core\";\nimport React, {useEffect, useRef} from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {useTranslation} from \"react-i18next\";\nimport TakeNoteAreaStyle from \"../Styles/TakeNoteAreaStyle\";\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\nimport GpsFixedSharpIcon from \"@material-ui/icons/GpsFixedSharp\";\nimport AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\nimport ArchiveIcon from \"@material-ui/icons/Archive\";\nimport FormatPaintIcon from \"@material-ui/icons/FormatPaint\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport UndoIcon from '@material-ui/icons/Undo';\nimport RedoIcon from '@material-ui/icons/Redo';\nimport {ColorSelectorModal} from \"../Modals/ColorSelectorModal\";\nimport DefaultTheme from \"../Themes/DefaultTheme\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport axios from \"axios\";\nimport {Notification} from \"../Modals/Notification\";\nimport NotificationTypes from \"../enums/NotificationTypes\";\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\n\n\nexport default function TakeNoteArea(props) {\n    const classes = TakeNoteAreaStyle();\n    const {t} = useTranslation();\n    const [openDetail, setOpenDetail] = React.useState(false);\n    const [redo, setRedo] = React.useState(true);\n    const [undo, setUndo] = React.useState(true);\n    const [color, setColor] = React.useState(DefaultTheme.palette.success.contrastText);\n    const [category, setCategory] = React.useState([]);\n    const [book, setBook] = React.useState(null);\n    const [bookList, setBookList] = React.useState([]);\n    const [pageNumber, setPageNumber] = React.useState(null);\n    const childRefNote = useRef();\n    const duration = 1000;\n    const [note, setNote] = React.useState(null);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    useEffect(() => {\n        axios.get('/books/getBookList').then(function (response) {\n            setBookList(response.data);\n        }).catch(function (error) {\n            console.log(error)\n        });\n    }, [])\n    const [categoryList, setCategoryList] = React.useState([]);\n    useEffect(() => {\n        axios.get('/categories/getCategoryList').then(function (response) {\n            setCategoryList(response.data);\n        }).catch(function (error) {\n            console.log(error)\n        });\n    }, [])\n    const childRef = useRef();\n    const handleClickPopover = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClosePopover = () => {\n        setAnchorEl(null);\n    };\n\n    const open = Boolean(anchorEl);\n    const handleOpenColorSelector = (event) => {\n        childRef.current.handleClickOpenWithRef();\n    };\n    const handleOnChangeTakeNote = () => {\n        setOpenDetail(true);\n    }\n    const handleSetCategory = (event, values) => {\n        setCategory(values);\n    }\n    const handleClose = () => {\n        setNote(null);\n        setBook(null);\n        setCategory([]);\n        setColor(null);\n        setPageNumber(null);\n    };\n    const handleGetJsonData = (categoryIdList) =>{\n        return {\n            \"noteContent\": note,\n            \"noteMapBook\": book.id,\n            \"noteMapCategory\": categoryIdList,\n            \"color\": color,\n            \"pageNumber\": pageNumber\n        };\n    }\n    const handleSaveNote = () => {\n        if (note !== null) {\n            if (book !== null) {\n                if (category.length !== 0) {\n                    if (pageNumber !== null) {\n                        var categoryIdList = [];\n                        category.map((categ) => {\n                            categoryIdList.push(categ.id)\n                        });\n                        axios.post('notes/addNote',\n                            handleGetJsonData(categoryIdList)\n                        ).then(function (response) {\n                            childRefNote.current.handleClickOpenWithRef(duration, t('SuccessMessage'), NotificationTypes.success);\n                            setTimeout(function () {\n                                handleClose();\n                            }, duration);\n                        }).catch(function (error) {\n                            childRefNote.current.handleClickOpenWithRef(duration, t('ErrorMessage'), NotificationTypes.error);\n                        });\n                        setOpenDetail(false)\n                    } else {\n                        childRefNote.current.handleClickOpenWithRef(duration, t('NullValueCheck', {value: t('Page')}), NotificationTypes.warning);\n                    }\n                } else {\n                    childRefNote.current.handleClickOpenWithRef(duration, t('NullValueCheck', {value: t('Category')}), NotificationTypes.warning);\n                }\n            } else {\n                childRefNote.current.handleClickOpenWithRef(duration, t('NullValueCheck', {value: t('Book')}), NotificationTypes.warning);\n            }\n        } else {\n            childRefNote.current.handleClickOpenWithRef(duration, t('NullValueCheck', {value: t('Note')}), NotificationTypes.warning);\n        }\n    }\n    const handleCloseDetail = () => {\n        setOpenDetail(false);\n        handleClose();\n    }\n    const ColorList =\n        [DefaultTheme.palette.primary.mainAlternative, DefaultTheme.palette.dark.mainAlternative,\n            DefaultTheme.palette.secondary.mainAlternative, DefaultTheme.palette.primary.lightAlternative,\n            DefaultTheme.palette.link.light, DefaultTheme.palette.purple.main,\n            DefaultTheme.palette.default.mainLight, DefaultTheme.palette.indigo.main,\n            DefaultTheme.palette.teal.main, DefaultTheme.palette.green.main,\n            DefaultTheme.palette.orange.main, DefaultTheme.palette.yellow.main]\n    const handleGetColors = () => {\n        return (\n            ColorList.map((color) =>\n                <Grid item xs={2} className={classes.colorGrid}>\n                    <IconButton\n                        color=\"inherit\"\n                        size={\"medium\"}\n                        onClick={(event) => {\n                            setColor(color);\n                            handleClosePopover();\n                        }}\n                    >\n                        <FiberManualRecordIcon style={{color: color}} className={classes.colorSize}/>\n                    </IconButton>\n                </Grid>\n            )\n        )\n    }\n    const handleGetDetailedNoteArea = () => {\n        if (openDetail) {\n            return (\n                <ClickAwayListener onClickAway={handleCloseDetail}>\n                    <Paper className={classes.detailedNoteArea} style={{background: color}}>\n                        <Grid container className={classes.contentGrid}>\n                            <Grid item xs={12} className={classes.pinButton}>\n                                <Tooltip title={t('Pin')}>\n                                    <IconButton\n                                        color=\"inherit\"\n                                        size={\"small\"}\n                                        onClick={event => {\n                                            event.stopPropagation();\n                                            event.preventDefault();\n                                            alert(\"Button clicked\");\n                                        }}\n                                    >\n                                        <GpsFixedSharpIcon fontSize={\"small\"}/>\n                                    </IconButton>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item xs={12} className={classes.noteArea}>\n                                <TextField\n                                    className={classes.textAreaStyle}\n                                    placeholder={t('TakeNote')}\n                                    inputProps={{'aria-label': t('TakeNote')}}\n                                    onSelect={() => {\n                                        handleOnChangeTakeNote()\n                                    }}\n                                    value={note}\n                                    maxRows={10}\n                                    onChange={(event) => {\n                                        setNote(event.target.value)\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={4} className={classes.selectArea}>\n                                <Autocomplete\n                                    options={bookList}\n                                    getOptionLabel={(option) => option.bookName}\n                                    onChange={(event, value) => {\n                                        setBook(value)\n                                    }}\n                                    renderInput={(params) =>\n                                        <TextField {...params} label={t('SelectBook')} variant={\"standard\"}/>}\n                                />\n                            </Grid>\n                            <Grid item xs={4} className={classes.selectArea}>\n                                <Autocomplete\n                                    multiple\n                                    id=\"tags-standard\"\n                                    options={categoryList}\n                                    getOptionLabel={(option) => option.categoryName}\n                                    onChange={handleSetCategory}\n                                    filterSelectedOptions\n                                    renderInput={(params) => <TextField {...params} label={t('SelectCategory')}\n                                                                        variant={\"standard\"}/>}\n                                />\n                            </Grid>\n                            <Grid item xs={4} className={classes.selectArea}>\n                                <TextField\n                                    className={classes.pageNumberStyle}\n                                    placeholder={t('EnterPage')}\n                                    inputProps={{'aria-label': t('EnterPage')}}\n                                    value={pageNumber}\n                                    onChange={(event) => {\n                                        setPageNumber(event.target.value)\n                                    }}\n                                    type=\"number\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Grid container spacing={1}>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('Reminder')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                            >\n                                                <AccessAlarmIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('ArchiveNote')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                            >\n                                                <ArchiveIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('AddImage')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={(event) => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    handleOpenColorSelector();\n                                                }}\n                                            >\n                                                <ImageIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('ColorSelect')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={(event) => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    handleClickPopover(event);\n                                                }}\n                                            >\n                                                <FormatPaintIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Popover\n                                            open={open}\n                                            anchorEl={anchorEl}\n                                            onClose={handleClosePopover}\n                                            anchorOrigin={{\n                                                vertical: 'bottom',\n                                                horizontal: 'center',\n                                            }}\n                                            transformOrigin={{\n                                                vertical: 'top',\n                                                horizontal: 'center',\n                                            }}\n                                        >\n                                            <Grid container className={classes.popoverGrid}>\n                                                {handleGetColors()}\n                                            </Grid>\n                                        </Popover>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('CommonPerson')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                            >\n                                                <PersonAddIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('Options')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                            >\n                                                <MoreVertIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('Options')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                                disabled={undo}\n                                            >\n                                                <UndoIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('Options')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                                disabled={redo}\n                                            >\n                                                <RedoIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={2} className={classes.cancelButton}>\n                                        <Button onClick={handleSaveNote}>\n                                            <Typography className={classes.cancelButtonText}>\n                                                {t('Save')}\n                                            </Typography>\n                                        </Button>\n                                    </Grid>\n                                    <Grid item xs={2} className={classes.cancelButton}>\n                                        <Button onClick={() => {\n                                            setOpenDetail(false)\n                                        }}>\n                                            <Typography className={classes.cancelButtonText}>\n                                                {t('Cancel')}\n                                            </Typography>\n                                        </Button>\n                                    </Grid>\n\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                    </Paper>\n                </ClickAwayListener>\n            )\n        } else {\n            return (\n                <Paper component=\"form\" className={classes.root}>\n                    <InputBase\n                        className={classes.input}\n                        placeholder={t('TakeNote')}\n                        inputProps={{'aria-label': t('TakeNote')}}\n                        onSelect={() => {\n                            handleOnChangeTakeNote()\n                        }}\n                    />\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"search\">\n                        <FormatListNumberedIcon/>\n                    </IconButton>\n                    <Divider className={classes.divider} orientation=\"vertical\"/>\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"directions\">\n                        <BorderColorIcon/>\n                    </IconButton>\n                    <Divider className={classes.divider} orientation=\"vertical\"/>\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"search\">\n                        <ImageIcon/>\n                    </IconButton>\n                </Paper>\n\n            )\n        }\n    }\n    return (\n        <Grid container>\n            <Grid item lg={4} md={3} sm={2} xs={0}/>\n            <Grid item lg={4} md={6} sm={8} xs={12}>\n                {handleGetDetailedNoteArea()}\n            </Grid>\n            <Grid item lg={4} md={3} sm={2} xs={0}/>\n            <ColorSelectorModal ref={childRef} setColor={setColor}/>\n            <Notification ref={childRefNote} duration={duration}/>\n        </Grid>\n    );\n\n}","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/ColorSelectorModal.js",["164","165","166"],"import React, {forwardRef, useImperativeHandle} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport {useTranslation} from \"react-i18next\";\nimport {Grid, Popover} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport DialogTitle from \"./DialogTitle\";\nimport ColorSelectorModalStyle from \"../Styles/ColorSelectorModalStyle\";\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport DefaultTheme from \"../Themes/DefaultTheme\";\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nconst ColorList =\n    [DefaultTheme.palette.primary.mainAlternative, DefaultTheme.palette.dark.mainAlternative,\n        DefaultTheme.palette.secondary.mainAlternative, DefaultTheme.palette.primary.lightAlternative,\n        DefaultTheme.palette.link.light, DefaultTheme.palette.purple.main,\n        DefaultTheme.palette.default.mainLight, DefaultTheme.palette.indigo.main,\n        DefaultTheme.palette.teal.main, DefaultTheme.palette.green.main,\n        DefaultTheme.palette.orange.main, DefaultTheme.palette.yellow.main]\n\nexport const ColorSelectorModal = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef() {\n                setOpen(true);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const {t} = useTranslation();\n    const classes = ColorSelectorModalStyle();\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSaveBook = () => {\n        axios.post('/books', {\n            bookName: open\n        }).then(function (response) {\n            console.log(response);\n        }).catch(function (error) {\n            console.log(error);\n        });\n    }\n\n    const handleGetColors = () => {\n        return (\n            ColorList.map((color) =>\n                <Grid item xs={2} className={classes.colorGrid}>\n                    <IconButton\n                        color=\"inherit\"\n                        size={\"medium\"}\n                        onClick={(event) => {\n                            props.setColor(color);\n                            event.stopPropagation();\n                            event.preventDefault();\n                            handleClose();\n                        }}\n                    >\n                        <FiberManualRecordIcon style={{color: color}} className={classes.colorSize}/>\n                    </IconButton>\n                </Grid>\n            )\n        )\n    };\n    return (\n/*\n        <Popover open={true}></Popover>\n*/\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" fullWidth={false}\n                open={open} classes={{paperFullWidth: classes.paperFullWidth, paper: classes.paperFullWidthMargin}}>\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                {t('SelectColor')}\n            </DialogTitle>\n            <DialogContent dividers>\n                <Grid container>\n                    {handleGetColors()}\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleClose} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Cancel')}\n                    </Typography>\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n})\n\n","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/StickyNoteStyle.js",["167","168"],"import {alpha, makeStyles} from \"@material-ui/core/styles\";\nimport DefaultTheme from \"../Themes/DefaultTheme\";\n\nconst StickyNoteStyle = makeStyles(theme => ({\n    iconButtons: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    stickyPadding: {\n        [theme.breakpoints.up('lg')]: {\n            margin: \"15px\"\n        },\n        [theme.breakpoints.only('md')]: {\n            margin: \"12px\"\n        },\n        [theme.breakpoints.only('sm')]: {\n            margin: \"9px\"\n        },\n        [theme.breakpoints.only('xs')]: {\n            margin: \"6px\"\n        },\n    },\n    contentGrid: {\n        textAlign: \"center\",\n        padding: \"5px\"\n    },\n    noteStyle: {\n        fontSize: \"14px\"\n    },\n    pinButton: {\n        textAlign: \"right\",\n    },\n}))\n\n\nexport default StickyNoteStyle;","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/NoteDetailModal.js",["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184"],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/TakeNoteAreaStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/ColorSelectorModalStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/NoteDetailModalStyle.js",[],{"ruleId":"185","severity":1,"message":"186","line":3,"column":10,"nodeType":"187","messageId":"188","endLine":3,"endColumn":14},{"ruleId":"185","severity":1,"message":"189","line":4,"column":9,"nodeType":"187","messageId":"188","endLine":4,"endColumn":18},{"ruleId":"185","severity":1,"message":"190","line":6,"column":9,"nodeType":"187","messageId":"188","endLine":6,"endColumn":15},{"ruleId":"185","severity":1,"message":"191","line":6,"column":17,"nodeType":"187","messageId":"188","endLine":6,"endColumn":21},{"ruleId":"185","severity":1,"message":"192","line":7,"column":8,"nodeType":"187","messageId":"188","endLine":7,"endColumn":16},{"ruleId":"185","severity":1,"message":"193","line":46,"column":11,"nodeType":"187","messageId":"188","endLine":46,"endColumn":26},{"ruleId":"185","severity":1,"message":"194","line":9,"column":8,"nodeType":"187","messageId":"188","endLine":9,"endColumn":20},{"ruleId":"185","severity":1,"message":"193","line":45,"column":11,"nodeType":"187","messageId":"188","endLine":45,"endColumn":26},{"ruleId":"195","severity":1,"message":"196","line":10,"column":1,"nodeType":"197","endLine":23,"endColumn":2},{"ruleId":"185","severity":1,"message":"198","line":22,"column":11,"nodeType":"187","messageId":"188","endLine":22,"endColumn":18},{"ruleId":"185","severity":1,"message":"199","line":30,"column":11,"nodeType":"187","messageId":"188","endLine":30,"endColumn":22},{"ruleId":"185","severity":1,"message":"200","line":40,"column":18,"nodeType":"187","messageId":"188","endLine":40,"endColumn":25},{"ruleId":"185","severity":1,"message":"201","line":41,"column":18,"nodeType":"187","messageId":"188","endLine":41,"endColumn":25},{"ruleId":"202","severity":1,"message":"203","line":107,"column":46,"nodeType":"204","messageId":"205","endLine":107,"endColumn":48},{"ruleId":"185","severity":1,"message":"206","line":10,"column":15,"nodeType":"187","messageId":"188","endLine":10,"endColumn":22},{"ruleId":"185","severity":1,"message":"193","line":51,"column":11,"nodeType":"187","messageId":"188","endLine":51,"endColumn":26},{"ruleId":"185","severity":1,"message":"207","line":59,"column":11,"nodeType":"187","messageId":"188","endLine":59,"endColumn":25},{"ruleId":"185","severity":1,"message":"208","line":1,"column":9,"nodeType":"187","messageId":"188","endLine":1,"endColumn":14},{"ruleId":"185","severity":1,"message":"194","line":2,"column":8,"nodeType":"187","messageId":"188","endLine":2,"endColumn":20},{"ruleId":"185","severity":1,"message":"209","line":10,"column":60,"nodeType":"187","messageId":"188","endLine":10,"endColumn":69},{"ruleId":"185","severity":1,"message":"210","line":14,"column":8,"nodeType":"187","messageId":"188","endLine":14,"endColumn":23},{"ruleId":"185","severity":1,"message":"211","line":15,"column":8,"nodeType":"187","messageId":"188","endLine":15,"endColumn":19},{"ruleId":"185","severity":1,"message":"212","line":17,"column":8,"nodeType":"187","messageId":"188","endLine":17,"endColumn":23},{"ruleId":"185","severity":1,"message":"213","line":18,"column":8,"nodeType":"187","messageId":"188","endLine":18,"endColumn":21},{"ruleId":"185","severity":1,"message":"214","line":19,"column":8,"nodeType":"187","messageId":"188","endLine":19,"endColumn":20},{"ruleId":"185","severity":1,"message":"215","line":20,"column":8,"nodeType":"187","messageId":"188","endLine":20,"endColumn":16},{"ruleId":"185","severity":1,"message":"216","line":21,"column":8,"nodeType":"187","messageId":"188","endLine":21,"endColumn":16},{"ruleId":"185","severity":1,"message":"217","line":27,"column":8,"nodeType":"187","messageId":"188","endLine":27,"endColumn":20},{"ruleId":"185","severity":1,"message":"218","line":63,"column":12,"nodeType":"187","messageId":"188","endLine":63,"endColumn":18},{"ruleId":"185","severity":1,"message":"219","line":72,"column":12,"nodeType":"187","messageId":"188","endLine":72,"endColumn":16},{"ruleId":"185","severity":1,"message":"200","line":72,"column":18,"nodeType":"187","messageId":"188","endLine":72,"endColumn":25},{"ruleId":"185","severity":1,"message":"220","line":73,"column":12,"nodeType":"187","messageId":"188","endLine":73,"endColumn":16},{"ruleId":"185","severity":1,"message":"201","line":73,"column":18,"nodeType":"187","messageId":"188","endLine":73,"endColumn":25},{"ruleId":"185","severity":1,"message":"221","line":75,"column":11,"nodeType":"187","messageId":"188","endLine":75,"endColumn":34},{"ruleId":"185","severity":1,"message":"207","line":90,"column":11,"nodeType":"187","messageId":"188","endLine":90,"endColumn":25},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'LeftMenu' is defined but never used.","'handleClickOpen' is assigned a value but never used.","'DefaultTheme' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'classes' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'setRedo' is assigned a value but never used.","'setUndo' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Popover' is defined but never used.","'handleSaveBook' is assigned a value but never used.","'alpha' is defined but never used.","'TextField' is defined but never used.","'AccessAlarmIcon' is defined but never used.","'ArchiveIcon' is defined but never used.","'FormatPaintIcon' is defined but never used.","'PersonAddIcon' is defined but never used.","'MoreVertIcon' is defined but never used.","'UndoIcon' is defined but never used.","'RedoIcon' is defined but never used.","'MenuBookIcon' is defined but never used.","'noteId' is assigned a value but never used.","'redo' is assigned a value but never used.","'undo' is assigned a value but never used.","'handleOpenColorSelector' is assigned a value but never used."]