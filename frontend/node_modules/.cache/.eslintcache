[{"/home/talat/IdeaProjects/TakeNote/frontend/src/index.js":"1","/home/talat/IdeaProjects/TakeNote/frontend/src/reportWebVitals.js":"2","/home/talat/IdeaProjects/TakeNote/frontend/src/App.js":"3","/home/talat/IdeaProjects/TakeNote/frontend/src/i18n/i18n.js":"4","/home/talat/IdeaProjects/TakeNote/frontend/src/ClientEdit.js":"5","/home/talat/IdeaProjects/TakeNote/frontend/src/ClientList.js":"6","/home/talat/IdeaProjects/TakeNote/frontend/src/state/store.js":"7","/home/talat/IdeaProjects/TakeNote/frontend/src/Themes/DefaultTheme.js":"8","/home/talat/IdeaProjects/TakeNote/frontend/src/enums/LanguagesEnum.js":"9","/home/talat/IdeaProjects/TakeNote/frontend/src/Home.js":"10","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppNavbar.js":"11","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppContent.js":"12","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/LeftMenu.js":"13","/home/talat/IdeaProjects/TakeNote/frontend/src/state/reducers/index.js":"14","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppContentStyle.js":"15","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppNavbarStyle.js":"16","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppDetailedContent.js":"17","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/LeftMenuStyle.js":"18","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/AddCategoryModal.js":"19","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/AddBookModal.js":"20","/home/talat/IdeaProjects/TakeNote/frontend/src/state/reducers/AppReducers.js":"21","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/TakeNoteArea.js":"22","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/Notification.js":"23","/home/talat/IdeaProjects/TakeNote/frontend/src/enums/NotificationTypes.js":"24","/home/talat/IdeaProjects/TakeNote/frontend/src/state/actionTypes.js":"25","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/DialogTitle.js":"26","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AddBookModalStyle.js":"27","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/ColorSelectorModal.js":"28","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/ColorSelectorModalStyle.js":"29","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/TakeNoteAreaStyle.js":"30","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppDetailedContentStyle.js":"31","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/StickyNote.js":"32","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/StickyNoteStyle.js":"33","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/NoteDetailModal.js":"34","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/NoteDetailModalStyle.js":"35","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/ScrollButton.js":"36","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/ScrollButtonStyles.js":"37"},{"size":365,"mtime":1633462782111,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":1631235929000,"results":"40","hashOfConfig":"39"},{"size":1083,"mtime":1639686339057,"results":"41","hashOfConfig":"39"},{"size":804,"mtime":1632675440268,"results":"42","hashOfConfig":"39"},{"size":2649,"mtime":1632677435138,"results":"43","hashOfConfig":"39"},{"size":2437,"mtime":1632677435214,"results":"44","hashOfConfig":"39"},{"size":113,"mtime":1633462782111,"results":"45","hashOfConfig":"39"},{"size":3295,"mtime":1639424296378,"results":"46","hashOfConfig":"39"},{"size":93,"mtime":1632675440280,"results":"47","hashOfConfig":"39"},{"size":522,"mtime":1639686339073,"results":"48","hashOfConfig":"39"},{"size":10207,"mtime":1639682565160,"results":"49","hashOfConfig":"39"},{"size":405,"mtime":1639682565160,"results":"50","hashOfConfig":"39"},{"size":4242,"mtime":1635358356951,"results":"51","hashOfConfig":"39"},{"size":136,"mtime":1633462782111,"results":"52","hashOfConfig":"39"},{"size":265,"mtime":1633929701001,"results":"53","hashOfConfig":"39"},{"size":2756,"mtime":1633465827618,"results":"54","hashOfConfig":"39"},{"size":3052,"mtime":1639682565160,"results":"55","hashOfConfig":"39"},{"size":2787,"mtime":1635358356951,"results":"56","hashOfConfig":"39"},{"size":3971,"mtime":1637441266838,"results":"57","hashOfConfig":"39"},{"size":3915,"mtime":1635876137041,"results":"58","hashOfConfig":"39"},{"size":739,"mtime":1639337314533,"results":"59","hashOfConfig":"39"},{"size":23500,"mtime":1642279638112,"results":"60","hashOfConfig":"39"},{"size":1447,"mtime":1637441266838,"results":"61","hashOfConfig":"39"},{"size":149,"mtime":1635876137041,"results":"62","hashOfConfig":"39"},{"size":209,"mtime":1639337314533,"results":"63","hashOfConfig":"39"},{"size":872,"mtime":1635358356951,"results":"64","hashOfConfig":"39"},{"size":623,"mtime":1635358356951,"results":"65","hashOfConfig":"39"},{"size":3977,"mtime":1639337314525,"results":"66","hashOfConfig":"39"},{"size":426,"mtime":1635358356951,"results":"67","hashOfConfig":"39"},{"size":2338,"mtime":1639946414329,"results":"68","hashOfConfig":"39"},{"size":1201,"mtime":1633929702069,"results":"69","hashOfConfig":"39"},{"size":7931,"mtime":1639505452952,"results":"70","hashOfConfig":"39"},{"size":861,"mtime":1639941154340,"results":"71","hashOfConfig":"39"},{"size":16327,"mtime":1639587153917,"results":"72","hashOfConfig":"39"},{"size":1341,"mtime":1639507823250,"results":"73","hashOfConfig":"39"},{"size":992,"mtime":1641068957688,"results":"74","hashOfConfig":"39"},{"size":365,"mtime":1639687115164,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"wffrf6",{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"/home/talat/IdeaProjects/TakeNote/frontend/src/index.js",[],["161","162"],"/home/talat/IdeaProjects/TakeNote/frontend/src/reportWebVitals.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/App.js",["163"],"import React, {Component} from 'react';\nimport './App.css';\nimport Home from './Home';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport ClientList from './ClientList';\nimport ClientEdit from \"./ClientEdit\";\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport DefaultTheme from \"./Themes/DefaultTheme\";\nimport {Provider} from \"react-redux\";\nimport store from \"./state/store\";\nimport ScrollButton from \"./Components/ScrollButton\";\n\nclass App extends Component {\n    render() {\n        const theme = DefaultTheme;\n        return (\n            <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <Router>\n                    <Switch>\n                        <Route path='/' exact={true} component={Home}/>\n                        <Route path='/clients' exact={true} component={ClientList}/>\n                        <Route path='/clients/:id' component={ClientEdit}/>\n                    </Switch>\n                </Router>\n            </ThemeProvider>\n            </Provider>\n        )\n    }\n}\n\nexport default App;","/home/talat/IdeaProjects/TakeNote/frontend/src/i18n/i18n.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/ClientEdit.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/ClientList.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/state/store.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Themes/DefaultTheme.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/enums/LanguagesEnum.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Home.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppNavbar.js",["164","165","166"],"import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport Badge from '@material-ui/core/Badge';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MailIcon from '@material-ui/icons/Mail';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport {useTranslation, withTranslation} from 'react-i18next';\nimport i18n from '../i18n/i18n';\nimport AppNavbarStyle from \"../Styles/AppNavbarStyle\";\nimport logo from '../assets/images/takenote.png'\nimport {Avatar, Hidden} from \"@material-ui/core\";\nimport LanguagesEnum from \"../enums/LanguagesEnum\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport TableChartIcon from '@material-ui/icons/TableChart';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SyncIcon from '@material-ui/icons/Sync';\nimport ViewStreamIcon from '@material-ui/icons/ViewStream';\nimport axios from \"axios\";\n\n\nfunction AppNavbar(props) {\n    const {t} = useTranslation();\n    const classes = AppNavbarStyle();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n    const [anchorElMenu, setAnchorElMenu] = React.useState(null);\n    const [activeLanguage, setActiveLanguage] = React.useState(i18n.language);\n    const [listIcon, setListIcon] = React.useState(true);\n    const [refreshData, setRefreshData] = React.useState(false);\n    const dispatch = useDispatch();\n    const changeLanguageSelection = (lng) => {\n        i18n.changeLanguage(lng);\n        setActiveLanguage(lng);\n    };\n\n    const handleClickLanguage = (event) => {\n        setAnchorElMenu(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorElMenu(null);\n    };\n\n    const isMenuOpen = Boolean(anchorEl);\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMobileMenuClose = () => {\n        setMobileMoreAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        handleMobileMenuClose();\n    };\n\n    const handleMobileMenuOpen = (event) => {\n        setMobileMoreAnchorEl(event.currentTarget);\n    };\n\n    const HandleSetListIcon = () => {\n        setListIcon(false);\n        dispatch({\n            type: \"NOTES_LIST_PREVIEW\",\n            payload: true\n        });\n    }\n    const HandleSetTableIcon = () => {\n        setListIcon(true)\n        dispatch({\n            type: \"NOTES_LIST_PREVIEW\",\n            payload: false\n        });\n    }\n\n    const HandleGetTableOrListIcon = () => {\n        if (listIcon) {\n            return <ViewStreamIcon color={\"secondary\"} onClick={HandleSetListIcon} fontSize={\"large\"}/>;\n        } else {\n            return <TableChartIcon color=\"secondary\" onClick={HandleSetTableIcon} fontSize={\"large\"}/>;\n        }\n    }\n\n    const menuId = 'primary-search-account-menu';\n    const renderMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n            id={menuId}\n            keepMounted\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\n            <MenuItem onClick={handleMenuClose}>My account</MenuItem>\n        </Menu>\n    );\n\n    const mobileMenuId = 'primary-search-account-menu-mobile';\n    const renderMobileMenu = (\n        <Menu\n            anchorEl={mobileMoreAnchorEl}\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\n            id={mobileMenuId}\n            keepMounted\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\n            open={isMobileMenuOpen}\n            onClose={handleMobileMenuClose}\n        >\n            <MenuItem>\n                <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n                    <Badge badgeContent={4} color=\"secondary\">\n                        <MailIcon/>\n                    </Badge>\n                </IconButton>\n                <p>Messages</p>\n            </MenuItem>\n            <MenuItem>\n                <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\n                    <Badge badgeContent={11} color=\"secondary\">\n                        <NotificationsIcon/>\n                    </Badge>\n                </IconButton>\n                <p>Notifications</p>\n            </MenuItem>\n            <MenuItem onClick={handleProfileMenuOpen}>\n                <IconButton\n                    aria-label=\"account of current user\"\n                    aria-controls=\"primary-search-account-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"inherit\"\n                >\n                    <AccountCircle/>\n                </IconButton>\n                <p>Profile</p>\n            </MenuItem>\n        </Menu>\n    );\n\n    const leftMenuOpenState = useSelector(state => state.app.leftMenuOpenState);\n\n    return (\n        <div className={classes.grow}>\n            <AppBar position=\"fixed\" color={\"default\"} className={classes.appBarMain}>\n                <Toolbar className={classes.toolBarMain}>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        aria-label=\"open drawer\"\n                        onClick={() => {\n                            dispatch({\n                                type: \"LEFT_MENU_OPEN_STATE\",\n                                payload: !leftMenuOpenState\n                            });\n                        }\n                        }\n                    >\n                        <MenuIcon/>\n                    </IconButton>\n                    <Avatar variant={\"square\"} src={logo}>\n\n                    </Avatar>\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon/>\n                        </div>\n                        <Hidden only={[\"xl\", \"lg\", \"md\", \"sm\"]}>\n                            <InputBase\n                                placeholder={t('searchShort')}\n                                classes={{\n                                    root: classes.inputRoot,\n                                    input: classes.inputInput,\n                                }}\n                                inputProps={{'aria-label': 'search'}}\n                            />\n                        </Hidden>\n                        <Hidden only={[\"xs\"]}>\n                            <InputBase\n                                placeholder={t('search')}\n                                classes={{\n                                    root: classes.inputRoot,\n                                    input: classes.inputInput,\n                                }}\n                                inputProps={{'aria-label': 'search'}}\n                            />\n                        </Hidden>\n\n                    </div>\n                    <div className={classes.grow}/>\n                    <div className={classes.sectionDesktop}>\n                        <IconButton color=\"inherit\" >\n                            <SyncIcon color=\"action\" fontSize={\"large\"}/>\n                        </IconButton>\n                        <IconButton color=\"inherit\">\n                            {HandleGetTableOrListIcon()}\n                        </IconButton>\n                        <IconButton color=\"inherit\">\n                            <SettingsIcon color=\"primary\" fontSize={\"large\"}/>\n                        </IconButton>\n                        <IconButton color=\"primary\" onClick={handleClickLanguage} className={classes.languageButton}>\n                            <Typography className={classes.languageText}>{activeLanguage}</Typography>\n                        </IconButton>\n                        <Menu\n                            id=\"simple-menu\"\n                            anchorEl={anchorElMenu}\n                            keepMounted\n                            open={Boolean(anchorElMenu)}\n                            onClose={handleClose}\n                        >\n                            <MenuItem onClick={() => {\n                                changeLanguageSelection(LanguagesEnum.English);\n                                handleClose()\n                            }}>\n                                <Typography>\n                                    {LanguagesEnum.English}\n                                </Typography>\n                            </MenuItem>\n                            <MenuItem onClick={() => {\n                                changeLanguageSelection(LanguagesEnum.Turkish);\n                                handleClose()\n                            }}>\n                                <Typography>\n                                    {LanguagesEnum.Turkish}\n                                </Typography>\n                            </MenuItem>\n                        </Menu>\n                    </div>\n                    <div className={classes.sectionMobile}>\n                        <IconButton\n                            aria-label=\"show more\"\n                            aria-controls={mobileMenuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleMobileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <MoreIcon/>\n                        </IconButton>\n                    </div>\n                </Toolbar>\n            </AppBar>\n            {renderMobileMenu}\n            {renderMenu}\n        </div>\n    );\n}\n\nexport default withTranslation()(AppNavbar)","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppContent.js",["167"],"import React, {useEffect} from \"react\";\nimport LeftMenu from \"./LeftMenu\";\nimport AppContentStyle from \"../Styles/AppContentStyle\";\nimport AppDetailedContent from \"./AppDetailedContent\";\n\nexport default function AppContent(props) {\n    const classes = AppContentStyle();\n    return (\n        <div className={classes.root}>\n            <LeftMenu/>\n            <AppDetailedContent/>\n        </div>\n    );\n}\n","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/LeftMenu.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/state/reducers/index.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppContentStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppNavbarStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Components/AppDetailedContent.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/LeftMenuStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/AddCategoryModal.js",["168"],"import React, {forwardRef, useImperativeHandle, useRef} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport AddBookModalStyle from \"../Styles/AddBookModalStyle\";\nimport {useTranslation} from \"react-i18next\";\nimport {FormControl, TextField} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport DialogTitle from \"./DialogTitle\";\nimport NotificationTypes from \"../enums/NotificationTypes\";\nimport {Notification} from \"./Notification\";\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nexport const AddCategoryModal = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef() {\n                setOpen(true);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const [categoryName, setCategoryName] = React.useState(null);\n    const {t} = useTranslation();\n    const classes = AddBookModalStyle();\n    const childRefBook = useRef();\n    const duration = 2000;\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setCategoryName(null);\n    };\n\n    const handleSaveCategory = () => {\n        if (categoryName !== null) {\n            axios.post('/categories/addCategory', {\n                category: categoryName\n            }).then(function (response) {\n                childRefBook.current.handleClickOpenWithRef(duration, t('SuccessMessage'), NotificationTypes.success);\n                setTimeout(function () {\n                    handleClose();\n                }, duration);\n            }).catch(function (error) {\n                childRefBook.current.handleClickOpenWithRef(duration, t('ErrorMessage'), NotificationTypes.error);\n                setTimeout(function () {\n                    setOpen(false)\n                }, duration);\n            });\n        } else {\n            childRefBook.current.handleClickOpenWithRef(duration, t('NullValueCheck', {value: t('Book')}), NotificationTypes.warning);\n        }\n    }\n\n    const handleChange = (event) => {\n        setCategoryName(event.target.value);\n    };\n    return (\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" maxWidth={\"sm\"} fullWidth={true}\n                open={open} classes={{paperFullWidth: classes.paperFullWidth, paper: classes.paperFullWidthMargin}}>\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                {t('AddCategory')}\n            </DialogTitle>\n            <DialogContent dividers>\n                <FormControl variant=\"outlined\" className={classes.addBookArea}>\n                    <TextField type={\"text\"} value={categoryName} id=\"outlined-basic\" label={t('CategoryName')}\n                               variant=\"outlined\" onChange={handleChange}/>\n                </FormControl>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleSaveCategory} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Save')}\n                    </Typography>\n                </Button>\n                <Button autoFocus onClick={handleClose} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Cancel')}\n                    </Typography>\n                </Button>\n            </DialogActions>\n            <Notification ref={childRefBook} duration={duration}/>\n        </Dialog>\n    );\n})\n\n","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/AddBookModal.js",["169"],"import React, {forwardRef, useImperativeHandle, useRef} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport AddBookModalStyle from \"../Styles/AddBookModalStyle\";\nimport {useTranslation} from \"react-i18next\";\nimport {FormControl, TextField} from \"@material-ui/core\";\nimport DialogTitle from \"./DialogTitle\";\nimport axios from \"axios\";\nimport {Notification} from \"./Notification\";\nimport NotificationTypes from \"../enums/NotificationTypes\";\n\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nexport const AddBookModal = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef() {\n                setOpen(true);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const [bookName, setBookName] = React.useState(null);\n    const {t} = useTranslation();\n    const classes = AddBookModalStyle();\n    const childRefBook = useRef();\n    const duration = 2000;\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setBookName(null);\n    };\n\n    const handleSaveBook = () => {\n        if (bookName !== null) {\n            axios.post('/books/addBook', {\n                bookName: bookName\n            }).then(function (response) {\n                childRefBook.current.handleClickOpenWithRef(duration, t('SuccessMessage'), NotificationTypes.success);\n                setTimeout(function () {\n                    handleClose();\n                }, duration);\n            }).catch(function (error) {\n                childRefBook.current.handleClickOpenWithRef(duration, t('ErrorMessage'), NotificationTypes.error);\n                setTimeout(function () {\n                    setOpen(false)\n                }, duration);\n            });\n        } else {\n            childRefBook.current.handleClickOpenWithRef(duration, t('NullValueCheck', {value: t('Book')}), NotificationTypes.warning);\n        }\n    }\n\n    const handleChange = (event) => {\n        setBookName(event.target.value);\n    };\n    return (\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" maxWidth={\"sm\"} fullWidth={true}\n                open={open} classes={{paperFullWidth: classes.paperFullWidth, paper: classes.paperFullWidthMargin}}>\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                {t('AddBook')}\n            </DialogTitle>\n            <DialogContent dividers>\n                <FormControl variant=\"outlined\" className={classes.addBookArea}>\n                    <TextField type={\"text\"} value={bookName} id=\"outlined-basic\" label={t('BookName')}\n                               variant=\"outlined\" onChange={handleChange}/>\n                </FormControl>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleSaveBook} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Save')}\n                    </Typography>\n                </Button>\n                <Button autoFocus onClick={handleClose} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Cancel')}\n                    </Typography>\n                </Button>\n            </DialogActions>\n            <Notification ref={childRefBook} duration={duration}/>\n        </Dialog>\n    );\n})\n\n","/home/talat/IdeaProjects/TakeNote/frontend/src/state/reducers/AppReducers.js",["170"],"import * as actionTypes from \"../actionTypes\"\n\nconst INITIAL_APP_STATE = {\n    title: \"First Screen\",\n    leftMenuOpenState: false,\n    notesListPreview: true,\n    notesRefresh: false\n};\n\nexport default (state = INITIAL_APP_STATE, action) => {\n    switch (action.type) {\n        case actionTypes.SET_PAGE_TITLE:\n            return {...state, title: action.payload}\n        case  actionTypes.LEFT_MENU_OPEN_STATE:\n            return {...state, leftMenuOpenState: action.payload}\n        case  actionTypes.NOTES_LIST_PREVIEW:\n            return {...state, notesListPreview: action.payload}\n        case  actionTypes.NOTES_REFRESH:\n            return {...state, notesRefresh: action.payload}\n        default:\n            return state;\n    }\n}","/home/talat/IdeaProjects/TakeNote/frontend/src/Components/TakeNoteArea.js",["171","172","173"],"/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/Notification.js",["174","175"],"import AppContentStyle from \"../Styles/AppContentStyle\";\nimport React, {forwardRef, useImperativeHandle} from \"react\";\nimport {Snackbar} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\n\nexport const Notification = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef(duration, message, severity) {\n                setOpen(true);\n                setDuration(duration);\n                setMessage(message);\n                setSeverity(severity);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const [duration, setDuration] = React.useState(2000);\n    const [message, setMessage] = React.useState(\"\");\n    const [severity, setSeverity] = React.useState(\"\");\n    const classes = AppContentStyle();\n    const [state, setState] = React.useState({\n        vertical: 'top',\n        horizontal: 'center',\n    });\n\n    const {vertical, horizontal} = state;\n\n    const handleClick = (newState) => () => {\n        setState({open: true, ...newState});\n    };\n\n\n    return (\n        <Snackbar\n            autoHideDuration={duration}\n            anchorOrigin={{vertical, horizontal}}\n            open={open}\n            key={vertical + horizontal}\n        >\n            <Alert onClose={() => {\n                setOpen(false)\n            }} severity={severity}>\n                {message}\n            </Alert>\n        </Snackbar>\n    );\n})\n","/home/talat/IdeaProjects/TakeNote/frontend/src/enums/NotificationTypes.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/state/actionTypes.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/DialogTitle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AddBookModalStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/ColorSelectorModal.js",["176","177","178"],"import React, {forwardRef, useImperativeHandle} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport {useTranslation} from \"react-i18next\";\nimport {Grid, Popover} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport DialogTitle from \"./DialogTitle\";\nimport ColorSelectorModalStyle from \"../Styles/ColorSelectorModalStyle\";\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport DefaultTheme from \"../Themes/DefaultTheme\";\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nconst ColorList =\n    [DefaultTheme.palette.primary.mainAlternative, DefaultTheme.palette.dark.mainAlternative,\n        DefaultTheme.palette.secondary.mainAlternative, DefaultTheme.palette.primary.lightAlternative,\n        DefaultTheme.palette.link.light, DefaultTheme.palette.purple.main,\n        DefaultTheme.palette.default.mainLight, DefaultTheme.palette.indigo.main,\n        DefaultTheme.palette.teal.main, DefaultTheme.palette.green.main,\n        DefaultTheme.palette.orange.main, DefaultTheme.palette.yellow.main]\n\nexport const ColorSelectorModal = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef() {\n                setOpen(true);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const {t} = useTranslation();\n    const classes = ColorSelectorModalStyle();\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSaveBook = () => {\n        axios.post('/books', {\n            bookName: open\n        }).then(function (response) {\n            console.log(response);\n        }).catch(function (error) {\n            console.log(error);\n        });\n    }\n\n    const handleGetColors = () => {\n        return (\n            ColorList.map((color) =>\n                <Grid item xs={2} className={classes.colorGrid}>\n                    <IconButton\n                        color=\"inherit\"\n                        size={\"medium\"}\n                        onClick={(event) => {\n                            props.setColor(color);\n                            event.stopPropagation();\n                            event.preventDefault();\n                            handleClose();\n                        }}\n                    >\n                        <FiberManualRecordIcon style={{color: color}} className={classes.colorSize}/>\n                    </IconButton>\n                </Grid>\n            )\n        )\n    };\n    return (\n/*\n        <Popover open={true}></Popover>\n*/\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" fullWidth={false}\n                open={open} classes={{paperFullWidth: classes.paperFullWidth, paper: classes.paperFullWidthMargin}}>\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                {t('SelectColor')}\n            </DialogTitle>\n            <DialogContent dividers>\n                <Grid container>\n                    {handleGetColors()}\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleClose} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Cancel')}\n                    </Typography>\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n})\n\n","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/ColorSelectorModalStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/TakeNoteAreaStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/AppDetailedContentStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Components/StickyNote.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/StickyNoteStyle.js",["179","180"],"import {alpha, makeStyles} from \"@material-ui/core/styles\";\nimport DefaultTheme from \"../Themes/DefaultTheme\";\n\nconst StickyNoteStyle = makeStyles(theme => ({\n    iconButtons: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    stickyPadding: {\n        [theme.breakpoints.up('lg')]: {\n            margin: \"15px\"\n        },\n        [theme.breakpoints.only('md')]: {\n            margin: \"12px\"\n        },\n        [theme.breakpoints.only('sm')]: {\n            margin: \"9px\"\n        },\n        [theme.breakpoints.only('xs')]: {\n            margin: \"6px\"\n        },\n    },\n    contentGrid: {\n        textAlign: \"center\",\n        padding: \"5px\"\n    },\n    noteStyle: {\n        fontSize: \"14px\",\n        fontWeight: \"bold\"\n    },\n    pinButton: {\n        textAlign: \"right\",\n    },\n}))\n\n\nexport default StickyNoteStyle;","/home/talat/IdeaProjects/TakeNote/frontend/src/Modals/NoteDetailModal.js",["181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196"],"import React, {forwardRef, useImperativeHandle, useRef} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport {useTranslation} from \"react-i18next\";\nimport {Chip, ClickAwayListener, Divider, Grid, InputBase, TextField, Tooltip} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport NoteDetailModalStyle from \"../Styles/NoteDetailModalStyle\";\nimport GpsFixedSharpIcon from \"@material-ui/icons/GpsFixedSharp\";\nimport AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\nimport ArchiveIcon from \"@material-ui/icons/Archive\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport FormatPaintIcon from \"@material-ui/icons/FormatPaint\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport RedoIcon from \"@material-ui/icons/Redo\";\nimport FormatListNumberedIcon from \"@material-ui/icons/FormatListNumbered\";\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\nimport DefaultTheme from \"../Themes/DefaultTheme\";\nimport {ColorSelectorModal} from \"./ColorSelectorModal\";\nimport DialogTitle from \"./DialogTitle\";\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\n\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nexport const NoteDetailModal = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef(note, color, noteId, pageNumber) {\n                setOpen(true);\n                setColor(color);\n                setNoteDetail(note);\n                setOpenDetail(true);\n                setPageNumber(pageNumber);\n                setNoteId(noteId);\n                handleSetNoteOtherDetail(noteId);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const [color, setColor] = React.useState(DefaultTheme.palette.success.contrastText);\n    const [noteDetail, setNoteDetail] = React.useState(null);\n    const [pageNumber, setPageNumber] = React.useState(null);\n    const [noteId, setNoteId] = React.useState(null);\n    const [noteOtherDetail, setNoteOtherDetail] = React.useState(null);\n\n    const classes = NoteDetailModalStyle();\n    const handleClose = () => {\n        setOpen(false);\n    };\n    const {t} = useTranslation();\n    const [openDetail, setOpenDetail] = React.useState(false);\n    const [redo, setRedo] = React.useState(true);\n    const [undo, setUndo] = React.useState(true);\n    const childRef = useRef();\n    const handleOpenColorSelector = (event) => {\n        childRef.current.handleClickOpenWithRef();\n    };\n    const handleSetNoteOtherDetail = (id) => {\n        if (id !== null) {\n            axios.get('/notes/getNoteDetail/' + id).then(function (response) {\n                setNoteOtherDetail(response.data);\n            }).catch(function (error) {\n                console.log(error)\n            });\n        }\n    }\n    const handleOnChangeTakeNote = () => {\n        setOpenDetail(true);\n    }\n    const handleSaveBook = () => {\n        axios.post('/books', {\n            bookName: \"bookName\"\n        }).then(function (response) {\n            console.log(response);\n        }).catch(function (error) {\n            console.log(error);\n        });\n    }\n    const handleGetNoteCategories = () => {\n        if (noteOtherDetail !== null) {\n            return(\n                noteOtherDetail.categoryDTOList.map((category) => {\n                    return(<Chip className={classes.chipStyle} icon={<AttachFileIcon/>} color={\"secondary\"} label={category.categoryName}/> )\n                })\n            )\n\n        }\n    }\n    const handleGetDetailedNoteArea = () => {\n        if (openDetail) {\n            return (\n                <ClickAwayListener onClickAway={() => {\n                    setOpenDetail(false)\n                }}>\n                    <Grid container className={classes.contentGrid} spacing={2}>\n                        <Grid item xs={12} className={classes.pinButton}>\n                            <Tooltip title={t('Pin')}>\n                                <IconButton\n                                    color=\"inherit\"\n                                    size={\"small\"}\n                                    onClick={event => {\n                                        event.stopPropagation();\n                                        event.preventDefault();\n                                        alert(\"Button clicked\");\n                                    }}\n                                >\n                                    <GpsFixedSharpIcon fontSize={\"small\"}/>\n                                </IconButton>\n                            </Tooltip>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Typography\n                                className={classes.textAreaStyle}\n                                placeholder={t('TakeNote')}\n                                inputProps={{'aria-label': t('TakeNote')}}\n                                onSelect={() => {\n                                    handleOnChangeTakeNote()\n                                }}\n                            >\n                                {noteDetail}\n                            </Typography>\n                            <Divider variant={\"fullWidth\"}/>\n                            <Typography className={classes.bookDetail}>{noteOtherDetail && (noteOtherDetail.bookDTO.bookName+\" - \"+pageNumber)}</Typography>\n                            {handleGetNoteCategories()}\n\n                        </Grid>\n{/*\n                        <Grid item xs={12}>\n                            <Grid container spacing={1}>\n                                <Grid item xs={1} className={classes.iconButtons}>\n                                    <Tooltip title={t('Reminder')}>\n                                        <IconButton\n                                            color=\"inherit\"\n                                            size={\"small\"}\n                                            onClick={event => {\n                                                event.stopPropagation();\n                                                event.preventDefault();\n                                                alert(\"Button clicked\");\n                                            }}\n                                        >\n                                            <AccessAlarmIcon fontSize={\"small\"}/>\n                                        </IconButton>\n                                    </Tooltip>\n                                </Grid>\n                                <Grid item xs={1} className={classes.iconButtons}>\n                                    <Tooltip title={t('ArchiveNote')}>\n                                        <IconButton\n                                            color=\"inherit\"\n                                            size={\"small\"}\n                                            onClick={event => {\n                                                event.stopPropagation();\n                                                event.preventDefault();\n                                                alert(\"Button clicked\");\n                                            }}\n                                        >\n                                            <ArchiveIcon fontSize={\"small\"}/>\n                                        </IconButton>\n                                    </Tooltip>\n                                </Grid>\n                                <Grid item xs={1} className={classes.iconButtons}>\n                                    <Tooltip title={t('AddImage')}>\n                                        <IconButton\n                                            color=\"inherit\"\n                                            size={\"small\"}\n                                            onClick={(event) => {\n                                                event.stopPropagation();\n                                                event.preventDefault();\n                                                handleOpenColorSelector();\n                                            }}\n                                        >\n                                            <ImageIcon fontSize={\"small\"}/>\n                                        </IconButton>\n                                    </Tooltip>\n                                </Grid>\n                                <Grid item xs={1} className={classes.iconButtons}>\n                                    <Tooltip title={t('ColorSelect')}>\n                                        <IconButton\n                                            color=\"inherit\"\n                                            size={\"small\"}\n                                            onClick={(event) => {\n                                                event.stopPropagation();\n                                                event.preventDefault();\n                                                handleOpenColorSelector();\n                                            }}\n                                        >\n                                            <FormatPaintIcon fontSize={\"small\"}/>\n                                        </IconButton>\n                                    </Tooltip>\n                                </Grid>\n                                <Grid item xs={1} className={classes.iconButtons}>\n                                    <Tooltip title={t('CommonPerson')}>\n                                        <IconButton\n                                            color=\"inherit\"\n                                            size={\"small\"}\n                                            onClick={event => {\n                                                event.stopPropagation();\n                                                event.preventDefault();\n                                                alert(\"Button clicked\");\n                                            }}\n                                        >\n                                            <PersonAddIcon fontSize={\"small\"}/>\n                                        </IconButton>\n                                    </Tooltip>\n                                </Grid>\n                                <Grid item xs={1} className={classes.iconButtons}>\n                                    <Tooltip title={t('Options')}>\n                                        <IconButton\n                                            color=\"inherit\"\n                                            size={\"small\"}\n                                            onClick={event => {\n                                                event.stopPropagation();\n                                                event.preventDefault();\n                                                alert(\"Button clicked\");\n                                            }}\n                                        >\n                                            <MoreVertIcon fontSize={\"small\"}/>\n                                        </IconButton>\n                                    </Tooltip>\n                                </Grid>\n                                <Grid item xs={1} className={classes.iconButtons}>\n                                    <Tooltip title={t('Options')}>\n                                        <IconButton\n                                            color=\"inherit\"\n                                            size={\"small\"}\n                                            onClick={event => {\n                                                event.stopPropagation();\n                                                event.preventDefault();\n                                                alert(\"Button clicked\");\n                                            }}\n                                            disabled={undo}\n                                        >\n                                            <UndoIcon fontSize={\"small\"}/>\n                                        </IconButton>\n                                    </Tooltip>\n                                </Grid>\n                                <Grid item xs={1} className={classes.iconButtons}>\n                                    <Tooltip title={t('Options')}>\n                                        <IconButton\n                                            color=\"inherit\"\n                                            size={\"small\"}\n                                            onClick={event => {\n                                                event.stopPropagation();\n                                                event.preventDefault();\n                                                alert(\"Button clicked\");\n                                            }}\n                                            disabled={redo}\n                                        >\n                                            <RedoIcon fontSize={\"small\"}/>\n                                        </IconButton>\n                                    </Tooltip>\n                                </Grid>\n                                <Grid item xs={4} className={classes.cancelButton}>\n                                </Grid>\n\n                            </Grid>\n                        </Grid>\n*/}\n                    </Grid>\n                </ClickAwayListener>\n            )\n        } else {\n            return (\n                <div className={classes.root}>\n                    <InputBase\n                        className={classes.input}\n                        placeholder={t('TakeNote')}\n                        inputProps={{'aria-label': t('TakeNote')}}\n                        onSelect={() => {\n                            handleOnChangeTakeNote()\n                        }}\n                    />\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"search\">\n                        <FormatListNumberedIcon/>\n                    </IconButton>\n                    <Divider className={classes.divider} orientation=\"vertical\"/>\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"directions\">\n                        <BorderColorIcon/>\n                    </IconButton>\n                    <Divider className={classes.divider} orientation=\"vertical\"/>\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"search\">\n                        <ImageIcon/>\n                    </IconButton>\n                </div>\n\n            )\n        }\n    }\n\n    return (\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" maxWidth={\"sm\"}\n                PaperProps={{style: {backgroundColor: color}}}\n                classes={{paperFullWidth: classes.paperFullWidth, paper: classes.paperFullWidthMargin}} fullWidth={true}\n                open={open}>\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                {t('NoteTitle')}\n            </DialogTitle>\n            <DialogContent dividers>\n                {handleGetDetailedNoteArea()}\n            </DialogContent>\n            <DialogActions>\n            {/*    <Button autoFocus onClick={handleSaveBook} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Save')}\n                    </Typography>\n                </Button>*/}\n                <Button autoFocus onClick={handleClose} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Close')}\n                    </Typography>\n                </Button>\n            </DialogActions>\n            <ColorSelectorModal ref={childRef} setColor={setColor}/>\n        </Dialog>\n    );\n})\n\n","/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/NoteDetailModalStyle.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Components/ScrollButton.js",[],"/home/talat/IdeaProjects/TakeNote/frontend/src/Styles/ScrollButtonStyles.js",[],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":11,"column":8,"nodeType":"203","messageId":"204","endLine":11,"endColumn":20},{"ruleId":"201","severity":1,"message":"205","line":27,"column":8,"nodeType":"203","messageId":"204","endLine":27,"endColumn":13},{"ruleId":"201","severity":1,"message":"206","line":38,"column":12,"nodeType":"203","messageId":"204","endLine":38,"endColumn":23},{"ruleId":"201","severity":1,"message":"207","line":38,"column":25,"nodeType":"203","messageId":"204","endLine":38,"endColumn":39},{"ruleId":"201","severity":1,"message":"208","line":1,"column":16,"nodeType":"203","messageId":"204","endLine":1,"endColumn":25},{"ruleId":"201","severity":1,"message":"209","line":45,"column":11,"nodeType":"203","messageId":"204","endLine":45,"endColumn":26},{"ruleId":"201","severity":1,"message":"209","line":46,"column":11,"nodeType":"203","messageId":"204","endLine":46,"endColumn":26},{"ruleId":"210","severity":1,"message":"211","line":10,"column":1,"nodeType":"212","endLine":23,"endColumn":2},{"ruleId":"201","severity":1,"message":"213","line":40,"column":18,"nodeType":"203","messageId":"204","endLine":40,"endColumn":25},{"ruleId":"201","severity":1,"message":"214","line":41,"column":18,"nodeType":"203","messageId":"204","endLine":41,"endColumn":25},{"ruleId":"215","severity":1,"message":"216","line":107,"column":46,"nodeType":"217","messageId":"218","endLine":107,"endColumn":48},{"ruleId":"201","severity":1,"message":"219","line":22,"column":11,"nodeType":"203","messageId":"204","endLine":22,"endColumn":18},{"ruleId":"201","severity":1,"message":"220","line":30,"column":11,"nodeType":"203","messageId":"204","endLine":30,"endColumn":22},{"ruleId":"201","severity":1,"message":"221","line":10,"column":15,"nodeType":"203","messageId":"204","endLine":10,"endColumn":22},{"ruleId":"201","severity":1,"message":"209","line":51,"column":11,"nodeType":"203","messageId":"204","endLine":51,"endColumn":26},{"ruleId":"201","severity":1,"message":"222","line":59,"column":11,"nodeType":"203","messageId":"204","endLine":59,"endColumn":25},{"ruleId":"201","severity":1,"message":"223","line":1,"column":9,"nodeType":"203","messageId":"204","endLine":1,"endColumn":14},{"ruleId":"201","severity":1,"message":"224","line":2,"column":8,"nodeType":"203","messageId":"204","endLine":2,"endColumn":20},{"ruleId":"201","severity":1,"message":"225","line":10,"column":60,"nodeType":"203","messageId":"204","endLine":10,"endColumn":69},{"ruleId":"201","severity":1,"message":"226","line":14,"column":8,"nodeType":"203","messageId":"204","endLine":14,"endColumn":23},{"ruleId":"201","severity":1,"message":"227","line":15,"column":8,"nodeType":"203","messageId":"204","endLine":15,"endColumn":19},{"ruleId":"201","severity":1,"message":"228","line":17,"column":8,"nodeType":"203","messageId":"204","endLine":17,"endColumn":23},{"ruleId":"201","severity":1,"message":"229","line":18,"column":8,"nodeType":"203","messageId":"204","endLine":18,"endColumn":21},{"ruleId":"201","severity":1,"message":"230","line":19,"column":8,"nodeType":"203","messageId":"204","endLine":19,"endColumn":20},{"ruleId":"201","severity":1,"message":"231","line":20,"column":8,"nodeType":"203","messageId":"204","endLine":20,"endColumn":16},{"ruleId":"201","severity":1,"message":"232","line":21,"column":8,"nodeType":"203","messageId":"204","endLine":21,"endColumn":16},{"ruleId":"201","severity":1,"message":"233","line":27,"column":8,"nodeType":"203","messageId":"204","endLine":27,"endColumn":20},{"ruleId":"201","severity":1,"message":"234","line":63,"column":12,"nodeType":"203","messageId":"204","endLine":63,"endColumn":18},{"ruleId":"201","severity":1,"message":"235","line":72,"column":12,"nodeType":"203","messageId":"204","endLine":72,"endColumn":16},{"ruleId":"201","severity":1,"message":"213","line":72,"column":18,"nodeType":"203","messageId":"204","endLine":72,"endColumn":25},{"ruleId":"201","severity":1,"message":"236","line":73,"column":12,"nodeType":"203","messageId":"204","endLine":73,"endColumn":16},{"ruleId":"201","severity":1,"message":"214","line":73,"column":18,"nodeType":"203","messageId":"204","endLine":73,"endColumn":25},{"ruleId":"201","severity":1,"message":"237","line":75,"column":11,"nodeType":"203","messageId":"204","endLine":75,"endColumn":34},{"ruleId":"201","severity":1,"message":"222","line":90,"column":11,"nodeType":"203","messageId":"204","endLine":90,"endColumn":25},"no-native-reassign",["238"],"no-negated-in-lhs",["239"],"no-unused-vars","'ScrollButton' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'refreshData' is assigned a value but never used.","'setRefreshData' is assigned a value but never used.","'useEffect' is defined but never used.","'handleClickOpen' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'setRedo' is assigned a value but never used.","'setUndo' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'classes' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'Popover' is defined but never used.","'handleSaveBook' is assigned a value but never used.","'alpha' is defined but never used.","'DefaultTheme' is defined but never used.","'TextField' is defined but never used.","'AccessAlarmIcon' is defined but never used.","'ArchiveIcon' is defined but never used.","'FormatPaintIcon' is defined but never used.","'PersonAddIcon' is defined but never used.","'MoreVertIcon' is defined but never used.","'UndoIcon' is defined but never used.","'RedoIcon' is defined but never used.","'MenuBookIcon' is defined but never used.","'noteId' is assigned a value but never used.","'redo' is assigned a value but never used.","'undo' is assigned a value but never used.","'handleOpenColorSelector' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]