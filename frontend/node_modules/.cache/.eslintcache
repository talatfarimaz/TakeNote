[{"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\index.js":"1","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\App.js":"2","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\i18n\\i18n.js":"4","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Home.js":"5","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\ClientEdit.js":"6","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\ClientList.js":"7","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Themes\\DefaultTheme.js":"8","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\state\\store.js":"9","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\enums\\LanguagesEnum.js":"10","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\AppContent.js":"11","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\AppNavbar.js":"12","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\LeftMenu.js":"13","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\state\\reducers\\index.js":"14","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\AppDetailedContent.js":"15","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\AppNavbarStyle.js":"16","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\AppContentStyle.js":"17","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\LeftMenuStyle.js":"18","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\AddBookModal.js":"19","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\state\\reducers\\AppReducers.js":"20","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\AppDetailedContentStyle.js":"21","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\AddBookModalStyle.js":"22","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\AddCategoryModal.js":"23","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\StickyNote.js":"24","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\StickyNoteStyle.js":"25","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\DialogTitle.js":"26","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\ColorSelectorModal.js":"27","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\ColorSelectorModalStyle.js":"28","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\TakeNoteArea.js":"29","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\TakeNoteAreaStyle.js":"30","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\NoteDetailModal.js":"31","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\NoteDetailModalStyle.js":"32","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\state\\actionTypes.js":"33","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\Notification.js":"34","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\enums\\NotificationTypes.js":"35"},{"size":365,"mtime":1634658155473,"results":"36","hashOfConfig":"37"},{"size":1029,"mtime":1634658154236,"results":"38","hashOfConfig":"37"},{"size":362,"mtime":1634658155473,"results":"39","hashOfConfig":"37"},{"size":804,"mtime":1634658155463,"results":"40","hashOfConfig":"37"},{"size":534,"mtime":1634658154262,"results":"41","hashOfConfig":"37"},{"size":2649,"mtime":1634658154236,"results":"42","hashOfConfig":"37"},{"size":2437,"mtime":1634658154236,"results":"43","hashOfConfig":"37"},{"size":3294,"mtime":1635315405983,"results":"44","hashOfConfig":"37"},{"size":113,"mtime":1634658155473,"results":"45","hashOfConfig":"37"},{"size":93,"mtime":1634658155463,"results":"46","hashOfConfig":"37"},{"size":392,"mtime":1634658154236,"results":"47","hashOfConfig":"37"},{"size":10115,"mtime":1635761985927,"results":"48","hashOfConfig":"37"},{"size":4242,"mtime":1635315843286,"results":"49","hashOfConfig":"37"},{"size":136,"mtime":1634658155473,"results":"50","hashOfConfig":"37"},{"size":3577,"mtime":1635331401382,"results":"51","hashOfConfig":"37"},{"size":2756,"mtime":1634658155463,"results":"52","hashOfConfig":"37"},{"size":265,"mtime":1634658155456,"results":"53","hashOfConfig":"37"},{"size":2787,"mtime":1634797934966,"results":"54","hashOfConfig":"37"},{"size":3915,"mtime":1635847343759,"results":"55","hashOfConfig":"37"},{"size":614,"mtime":1635761771501,"results":"56","hashOfConfig":"37"},{"size":1201,"mtime":1634658155456,"results":"57","hashOfConfig":"37"},{"size":623,"mtime":1635261545133,"results":"58","hashOfConfig":"37"},{"size":3111,"mtime":1635261545183,"results":"59","hashOfConfig":"37"},{"size":7898,"mtime":1635245478703,"results":"60","hashOfConfig":"37"},{"size":833,"mtime":1634813351618,"results":"61","hashOfConfig":"37"},{"size":892,"mtime":1635157604659,"results":"62","hashOfConfig":"37"},{"size":4032,"mtime":1635331401378,"results":"63","hashOfConfig":"37"},{"size":445,"mtime":1635261545151,"results":"64","hashOfConfig":"37"},{"size":15404,"mtime":1635848709583,"results":"65","hashOfConfig":"37"},{"size":1263,"mtime":1635403171793,"results":"66","hashOfConfig":"37"},{"size":15142,"mtime":1635261545156,"results":"67","hashOfConfig":"37"},{"size":1190,"mtime":1635261338382,"results":"68","hashOfConfig":"37"},{"size":165,"mtime":1635261889733,"results":"69","hashOfConfig":"37"},{"size":1409,"mtime":1635847381457,"results":"70","hashOfConfig":"37"},{"size":155,"mtime":1635835631454,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"6c4wtn",{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\index.js",[],["152","153"],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\App.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\i18n\\i18n.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Home.js",["154","155","156","157","158"],"import React, { Component } from 'react';\nimport './App.css';\nimport { Link } from 'react-router-dom';\nimport {Container } from 'reactstrap';\nimport AppNavbar from \"./Components/AppNavbar\";\nimport {Button, Grid} from \"@material-ui/core\";\nimport LeftMenu from \"./Components/LeftMenu\";\nimport AppContent from \"./Components/AppContent\";\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <AppNavbar/>\n                <AppContent/>\n            </div>\n        );\n    }\n}\n\nexport default Home;","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\ClientEdit.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\ClientList.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Themes\\DefaultTheme.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\state\\store.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\enums\\LanguagesEnum.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\AppContent.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\AppNavbar.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\LeftMenu.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\state\\reducers\\index.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\AppDetailedContent.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\AppNavbarStyle.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\AppContentStyle.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\LeftMenuStyle.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\AddBookModal.js",["159"],"import React, {forwardRef, useImperativeHandle, useRef} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport AddBookModalStyle from \"../Styles/AddBookModalStyle\";\nimport {useTranslation} from \"react-i18next\";\nimport {FormControl, TextField} from \"@material-ui/core\";\nimport DialogTitle from \"./DialogTitle\";\nimport axios from \"axios\";\nimport {Notification} from \"./Notification\";\nimport NotificationTypes from \"../enums/NotificationTypes\";\n\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nexport const AddBookModal = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef() {\n                setOpen(true);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const [bookName, setBookName] = React.useState(null);\n    const {t} = useTranslation();\n    const classes = AddBookModalStyle();\n    const childRefBook = useRef();\n    const duration = 2000;\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setBookName(null);\n    };\n\n    const handleSaveBook = () => {\n        if (bookName !== null) {\n            axios.post('/books/addBook', {\n                bookName: bookName\n            }).then(function (response) {\n                childRefBook.current.handleClickOpenWithRef(duration, t('SuccessMessage'), NotificationTypes.success);\n                setTimeout(function () {\n                    handleClose();\n                }, duration);\n            }).catch(function (error) {\n                childRefBook.current.handleClickOpenWithRef(duration, t('ErrorMessage'), NotificationTypes.error);\n                setTimeout(function () {\n                    setOpen(false)\n                }, duration);\n            });\n        } else {\n            childRefBook.current.handleClickOpenWithRef(duration, t('NullValueCheck', {value: t('Book')}), NotificationTypes.warning);\n        }\n    }\n\n    const handleChange = (event) => {\n        setBookName(event.target.value);\n    };\n    return (\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" maxWidth={\"sm\"} fullWidth={true}\n                open={open} classes={{paperFullWidth: classes.paperFullWidth, paper: classes.paperFullWidthMargin}}>\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                {t('AddBook')}\n            </DialogTitle>\n            <DialogContent dividers>\n                <FormControl variant=\"outlined\" className={classes.addBookArea}>\n                    <TextField type={\"text\"} value={bookName} id=\"outlined-basic\" label={t('BookName')}\n                               variant=\"outlined\" onChange={handleChange}/>\n                </FormControl>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleSaveBook} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Save')}\n                    </Typography>\n                </Button>\n                <Button autoFocus onClick={handleClose} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Cancel')}\n                    </Typography>\n                </Button>\n            </DialogActions>\n            <Notification ref={childRefBook} duration={duration}/>\n        </Dialog>\n    );\n})\n\n","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\state\\reducers\\AppReducers.js",["160"],"import * as actionTypes from \"../actionTypes\"\n\nconst INITIAL_APP_STATE = {\n    title: \"First Screen\",\n    leftMenuOpenState: false,\n    notesListPreview: true,\n};\n\nexport default (state = INITIAL_APP_STATE, action) => {\n    switch (action.type) {\n        case actionTypes.SET_PAGE_TITLE:\n            return {...state, title: action.payload}\n        case  actionTypes.LEFT_MENU_OPEN_STATE:\n            return {...state, leftMenuOpenState: action.payload}\n        case  actionTypes.NOTES_LIST_PREVIEW:\n            return {...state, notesListPreview: action.payload}\n        default:\n            return state;\n    }\n}","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\AppDetailedContentStyle.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\AddBookModalStyle.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\AddCategoryModal.js",["161"],"import React, {forwardRef, useImperativeHandle} from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport AddBookModalStyle from \"../Styles/AddBookModalStyle\";\nimport {useTranslation} from \"react-i18next\";\nimport {FormControl, TextField} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport DialogTitle from \"./DialogTitle\";\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nexport const AddCategoryModal = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef() {\n                setOpen(true);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const [categoryName, setCategoryName] = React.useState(null);\n    const {t} = useTranslation();\n    const classes = AddBookModalStyle();\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setCategoryName(null);\n    };\n\n    const handleSaveBook = () => {\n        axios.post('/categories', {\n            bookName: categoryName\n        }).then(function (response) {\n            console.log(response);\n        }).catch(function (error) {\n            console.log(error);\n        });\n    }\n\n    const handleChange = (event) => {\n        setCategoryName(event.target.value);\n    };\n    return (\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" maxWidth={\"sm\"} fullWidth={true}\n                open={open} classes={{paperFullWidth: classes.paperFullWidth, paper: classes.paperFullWidthMargin}}>\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                {t('AddCategory')}\n            </DialogTitle>\n            <DialogContent dividers>\n                <FormControl variant=\"outlined\" className={classes.addBookArea}>\n                    <TextField type={\"text\"} value={categoryName} id=\"outlined-basic\" label={t('CategoryName')}\n                               variant=\"outlined\" onChange={handleChange}/>\n                </FormControl>\n            </DialogContent>\n            <DialogActions>\n                <Button autoFocus onClick={handleSaveBook} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Save')}\n                    </Typography>\n                </Button>\n                <Button autoFocus onClick={handleClose} color=\"primary\" variant={\"contained\"}>\n                    <Typography>\n                        {t('Cancel')}\n                    </Typography>\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n})\n\n","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\StickyNote.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\StickyNoteStyle.js",["162","163"],"import {alpha, makeStyles} from \"@material-ui/core/styles\";\nimport DefaultTheme from \"../Themes/DefaultTheme\";\n\nconst StickyNoteStyle = makeStyles(theme => ({\n    iconButtons: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    stickyPadding: {\n        [theme.breakpoints.up('lg')]: {\n            margin: \"15px\"\n        },\n        [theme.breakpoints.only('md')]: {\n            margin: \"12px\"\n        },\n        [theme.breakpoints.only('sm')]: {\n            margin: \"9px\"\n        },\n        [theme.breakpoints.only('xs')]: {\n            margin: \"6px\"\n        },\n    },\n    contentGrid: {\n        textAlign: \"center\",\n        padding: \"5px\"\n    },\n    noteStyle: {\n        fontSize: \"14px\"\n    },\n    pinButton: {\n        textAlign: \"right\",\n    },\n}))\n\n\nexport default StickyNoteStyle;","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\DialogTitle.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\ColorSelectorModal.js",["164","165"],"import React, {forwardRef, useImperativeHandle} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport DialogTitle from \"./DialogTitle\";\r\nimport ColorSelectorModalStyle from \"../Styles/ColorSelectorModalStyle\";\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport DefaultTheme from \"../Themes/DefaultTheme\";\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nconst ColorList =\r\n    [DefaultTheme.palette.primary.mainAlternative, DefaultTheme.palette.dark.mainAlternative,\r\n        DefaultTheme.palette.secondary.mainAlternative, DefaultTheme.palette.primary.lightAlternative,\r\n        DefaultTheme.palette.link.light, DefaultTheme.palette.purple.main,\r\n        DefaultTheme.palette.default.mainLight, DefaultTheme.palette.indigo.main,\r\n        DefaultTheme.palette.teal.main, DefaultTheme.palette.green.main,\r\n        DefaultTheme.palette.orange.main, DefaultTheme.palette.yellow.main]\r\n\r\nexport const ColorSelectorModal = forwardRef((props, ref) => {\r\n    useImperativeHandle(\r\n        ref,\r\n        () => ({\r\n            handleClickOpenWithRef() {\r\n                setOpen(true);\r\n            }\r\n        }),\r\n    )\r\n    const [open, setOpen] = React.useState(false);\r\n    const {t} = useTranslation();\r\n    const classes = ColorSelectorModalStyle();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleSaveBook = () => {\r\n        axios.post('/books', {\r\n            bookName: open\r\n        }).then(function (response) {\r\n            console.log(response);\r\n        }).catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    const handleGetColors = () => {\r\n        return (\r\n            ColorList.map((color) =>\r\n                <Grid item xs={2} className={classes.colorGrid}>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        size={\"medium\"}\r\n                        onClick={(event) => {\r\n                            props.setColor(color);\r\n                            event.stopPropagation();\r\n                            event.preventDefault();\r\n                            handleClose();\r\n                        }}\r\n                    >\r\n                        <FiberManualRecordIcon style={{color: color}} className={classes.colorSize}/>\r\n                    </IconButton>\r\n                </Grid>\r\n            )\r\n        )\r\n    };\r\n    return (\r\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" fullWidth={false}\r\n                open={open} classes={{paperFullWidth: classes.paperFullWidth, paper: classes.paperFullWidthMargin}}>\r\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                {t('SelectColor')}\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n                <Grid container>\r\n                    {handleGetColors()}\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={handleClose} color=\"primary\" variant={\"contained\"}>\r\n                    <Typography>\r\n                        {t('Cancel')}\r\n                    </Typography>\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n})\r\n\r\n","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\ColorSelectorModalStyle.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Components\\TakeNoteArea.js",["166","167","168","169","170","171","172"],"import {\n    Button,\n    ClickAwayListener,\n    Divider,\n    Grid,\n    InputBase,\n    Paper,\n    TextField,\n    Tooltip,\n    Typography\n} from \"@material-ui/core\";\nimport React, {useEffect, useRef} from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {useTranslation} from \"react-i18next\";\nimport TakeNoteAreaStyle from \"../Styles/TakeNoteAreaStyle\";\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\nimport GpsFixedSharpIcon from \"@material-ui/icons/GpsFixedSharp\";\nimport AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\nimport ArchiveIcon from \"@material-ui/icons/Archive\";\nimport FormatPaintIcon from \"@material-ui/icons/FormatPaint\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport UndoIcon from '@material-ui/icons/Undo';\nimport RedoIcon from '@material-ui/icons/Redo';\nimport {ColorSelectorModal} from \"../Modals/ColorSelectorModal\";\nimport DefaultTheme from \"../Themes/DefaultTheme\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport axios from \"axios\";\nimport NotificationTypes from \"../enums/NotificationTypes\";\n\n\nexport default function TakeNoteArea(props) {\n    const classes = TakeNoteAreaStyle();\n    const {t} = useTranslation();\n    const [openDetail, setOpenDetail] = React.useState(false);\n    const [redo, setRedo] = React.useState(true);\n    const [undo, setUndo] = React.useState(true);\n    const [color, setColor] = React.useState(DefaultTheme.palette.success.contrastText);\n    const [category, setCategory] = React.useState(null);\n    const [book, setBook] = React.useState(null);\n    const [bookList, setBookList] = React.useState([]);\n    useEffect(()=>{\n        axios.get('/books/getBookList').then(function (response) {\n            console.log(response)\n        }).catch(function (error) {\n           console.log(error)\n        });\n    })\n    const childRef = useRef();\n    const handleOpenColorSelector = (event) => {\n        childRef.current.handleClickOpenWithRef();\n    };\n    const handleOnChangeTakeNote = () => {\n        setOpenDetail(true);\n    }\n    const handleGetDetailedNoteArea = () => {\n        if (openDetail) {\n            return (\n                <ClickAwayListener onClickAway={() => {\n                    setOpenDetail(false)\n                }}>\n                    <Paper className={classes.detailedNoteArea} style={{background: color}}>\n                        <Grid container className={classes.contentGrid}>\n                            <Grid item xs={12} className={classes.pinButton}>\n                                <Tooltip title={t('Pin')}>\n                                    <IconButton\n                                        color=\"inherit\"\n                                        size={\"small\"}\n                                        onClick={event => {\n                                            event.stopPropagation();\n                                            event.preventDefault();\n                                            alert(\"Button clicked\");\n                                        }}\n                                    >\n                                        <GpsFixedSharpIcon fontSize={\"small\"}/>\n                                    </IconButton>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item xs={12} className={classes.noteArea}>\n                                <TextField\n                                    className={classes.textAreaStyle}\n                                    placeholder={t('TakeNote')}\n                                    inputProps={{'aria-label': t('TakeNote')}}\n                                    onSelect={() => {\n                                        handleOnChangeTakeNote()\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={6} className={classes.selectArea}>\n                                <Autocomplete\n                                    options={bookList}\n                                    getOptionLabel={(option) => option.bookName}\n                                    onChange={(event, value) => {setBook(value.bookName)}}\n                                    renderInput={(params) => <TextField {...params} label={t('SelectBook')} variant={\"standard\"} />}\n                                />\n                            </Grid>\n                            <Grid item xs={6} className={classes.selectArea}>\n                                <Autocomplete\n                                    options={bookList}\n                                    getOptionLabel={(option) => option.bookName}\n                                    renderInput={(params) => <TextField {...params} label={t('SelectCategory')} variant={\"standard\"} />}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <Grid container spacing={1}>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('Reminder')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                            >\n                                                <AccessAlarmIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('ArchiveNote')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                            >\n                                                <ArchiveIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('AddImage')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={(event) => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    handleOpenColorSelector();\n                                                }}\n                                            >\n                                                <ImageIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('ColorSelect')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={(event) => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    handleOpenColorSelector();\n                                                }}\n                                            >\n                                                <FormatPaintIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('CommonPerson')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                            >\n                                                <PersonAddIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('Options')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                            >\n                                                <MoreVertIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('Options')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                                disabled={undo}\n                                            >\n                                                <UndoIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={1} className={classes.iconButtons}>\n                                        <Tooltip title={t('Options')}>\n                                            <IconButton\n                                                color=\"inherit\"\n                                                size={\"small\"}\n                                                onClick={event => {\n                                                    event.stopPropagation();\n                                                    event.preventDefault();\n                                                    alert(\"Button clicked\");\n                                                }}\n                                                disabled={redo}\n                                            >\n                                                <RedoIcon fontSize={\"small\"}/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </Grid>\n                                    <Grid item xs={4} className={classes.cancelButton}>\n                                        <Button onClick={() => {\n                                            setOpenDetail(false)\n                                        }}>\n                                            <Typography className={classes.cancelButtonText}>\n                                                {t('Cancel')}\n                                            </Typography>\n                                        </Button>\n                                    </Grid>\n\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                    </Paper>\n                </ClickAwayListener>\n            )\n        } else {\n            return (\n                <Paper component=\"form\" className={classes.root}>\n                    <InputBase\n                        className={classes.input}\n                        placeholder={t('TakeNote')}\n                        inputProps={{'aria-label': t('TakeNote')}}\n                        onSelect={() => {\n                            handleOnChangeTakeNote()\n                        }}\n                    />\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"search\">\n                        <FormatListNumberedIcon/>\n                    </IconButton>\n                    <Divider className={classes.divider} orientation=\"vertical\"/>\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"directions\">\n                        <BorderColorIcon/>\n                    </IconButton>\n                    <Divider className={classes.divider} orientation=\"vertical\"/>\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"search\">\n                        <ImageIcon/>\n                    </IconButton>\n                </Paper>\n\n            )\n        }\n    }\n    return (\n        <Grid container>\n            <Grid item lg={4} md={3} sm={2} xs={0}/>\n            <Grid item lg={4} md={6} sm={8} xs={12}>\n                {handleGetDetailedNoteArea()}\n            </Grid>\n            <Grid item lg={4} md={3} sm={2} xs={0}/>\n            <ColorSelectorModal ref={childRef} setColor={setColor}/>\n        </Grid>\n    );\n\n}","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\TakeNoteAreaStyle.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\NoteDetailModal.js",["173","174"],"import React, {forwardRef, useImperativeHandle, useRef} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {ClickAwayListener, Divider, Grid, InputBase, TextField, Tooltip} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport NoteDetailModalStyle from \"../Styles/NoteDetailModalStyle\";\r\nimport GpsFixedSharpIcon from \"@material-ui/icons/GpsFixedSharp\";\r\nimport AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\r\nimport ArchiveIcon from \"@material-ui/icons/Archive\";\r\nimport ImageIcon from \"@material-ui/icons/Image\";\r\nimport FormatPaintIcon from \"@material-ui/icons/FormatPaint\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport UndoIcon from \"@material-ui/icons/Undo\";\r\nimport RedoIcon from \"@material-ui/icons/Redo\";\r\nimport FormatListNumberedIcon from \"@material-ui/icons/FormatListNumbered\";\r\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\r\nimport DefaultTheme from \"../Themes/DefaultTheme\";\r\nimport {ColorSelectorModal} from \"./ColorSelectorModal\";\r\nimport DialogTitle from \"./DialogTitle\";\r\n\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nexport const NoteDetailModal = forwardRef((props, ref) => {\r\n    useImperativeHandle(\r\n        ref,\r\n        () => ({\r\n            handleClickOpenWithRef(note, color) {\r\n                setOpen(true);\r\n                setColor(color);\r\n                setNoteDetail(note);\r\n                setOpenDetail(true)\r\n            }\r\n        }),\r\n    )\r\n    const [open, setOpen] = React.useState(false);\r\n    const [color, setColor] = React.useState(DefaultTheme.palette.success.contrastText);\r\n    const [noteDetail, setNoteDetail] = React.useState(null);\r\n    const classes = NoteDetailModalStyle();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const {t} = useTranslation();\r\n    const [openDetail, setOpenDetail] = React.useState(false);\r\n    const [redo, setRedo] = React.useState(true);\r\n    const [undo, setUndo] = React.useState(true);\r\n    const childRef = useRef();\r\n    const handleOpenColorSelector = (event) => {\r\n        childRef.current.handleClickOpenWithRef();\r\n    };\r\n    const handleOnChangeTakeNote = () => {\r\n        setOpenDetail(true);\r\n    }\r\n    const handleSaveBook = () => {\r\n        axios.post('/books', {\r\n            bookName: \"bookName\"\r\n        }).then(function (response) {\r\n            console.log(response);\r\n        }).catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    }\r\n    const handleGetDetailedNoteArea = () => {\r\n        if (openDetail) {\r\n            return (\r\n                <ClickAwayListener onClickAway={() => {\r\n                    setOpenDetail(false)\r\n                }}>\r\n                    <Grid container className={classes.contentGrid} spacing={2}>\r\n                        <Grid item xs={12} className={classes.pinButton}>\r\n                            <Tooltip title={t('Pin')}>\r\n                                <IconButton\r\n                                    color=\"inherit\"\r\n                                    size={\"small\"}\r\n                                    onClick={event => {\r\n                                        event.stopPropagation();\r\n                                        event.preventDefault();\r\n                                        alert(\"Button clicked\");\r\n                                    }}\r\n                                >\r\n                                    <GpsFixedSharpIcon fontSize={\"small\"}/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                className={classes.textAreaStyle}\r\n                                placeholder={t('TakeNote')}\r\n                                inputProps={{'aria-label': t('TakeNote')}}\r\n                                onSelect={() => {\r\n                                    handleOnChangeTakeNote()\r\n                                }}\r\n                                value={noteDetail}\r\n                            /> </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={1}>\r\n                                <Grid item xs={1} className={classes.iconButtons}>\r\n                                    <Tooltip title={t('Reminder')}>\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size={\"small\"}\r\n                                            onClick={event => {\r\n                                                event.stopPropagation();\r\n                                                event.preventDefault();\r\n                                                alert(\"Button clicked\");\r\n                                            }}\r\n                                        >\r\n                                            <AccessAlarmIcon fontSize={\"small\"}/>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.iconButtons}>\r\n                                    <Tooltip title={t('ArchiveNote')}>\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size={\"small\"}\r\n                                            onClick={event => {\r\n                                                event.stopPropagation();\r\n                                                event.preventDefault();\r\n                                                alert(\"Button clicked\");\r\n                                            }}\r\n                                        >\r\n                                            <ArchiveIcon fontSize={\"small\"}/>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.iconButtons}>\r\n                                    <Tooltip title={t('AddImage')}>\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size={\"small\"}\r\n                                            onClick={(event) => {\r\n                                                event.stopPropagation();\r\n                                                event.preventDefault();\r\n                                                handleOpenColorSelector();\r\n                                            }}\r\n                                        >\r\n                                            <ImageIcon fontSize={\"small\"}/>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.iconButtons}>\r\n                                    <Tooltip title={t('ColorSelect')}>\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size={\"small\"}\r\n                                            onClick={(event) => {\r\n                                                event.stopPropagation();\r\n                                                event.preventDefault();\r\n                                                handleOpenColorSelector();\r\n                                            }}\r\n                                        >\r\n                                            <FormatPaintIcon fontSize={\"small\"}/>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.iconButtons}>\r\n                                    <Tooltip title={t('CommonPerson')}>\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size={\"small\"}\r\n                                            onClick={event => {\r\n                                                event.stopPropagation();\r\n                                                event.preventDefault();\r\n                                                alert(\"Button clicked\");\r\n                                            }}\r\n                                        >\r\n                                            <PersonAddIcon fontSize={\"small\"}/>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.iconButtons}>\r\n                                    <Tooltip title={t('Options')}>\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size={\"small\"}\r\n                                            onClick={event => {\r\n                                                event.stopPropagation();\r\n                                                event.preventDefault();\r\n                                                alert(\"Button clicked\");\r\n                                            }}\r\n                                        >\r\n                                            <MoreVertIcon fontSize={\"small\"}/>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.iconButtons}>\r\n                                    <Tooltip title={t('Options')}>\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size={\"small\"}\r\n                                            onClick={event => {\r\n                                                event.stopPropagation();\r\n                                                event.preventDefault();\r\n                                                alert(\"Button clicked\");\r\n                                            }}\r\n                                            disabled={undo}\r\n                                        >\r\n                                            <UndoIcon fontSize={\"small\"}/>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                                <Grid item xs={1} className={classes.iconButtons}>\r\n                                    <Tooltip title={t('Options')}>\r\n                                        <IconButton\r\n                                            color=\"inherit\"\r\n                                            size={\"small\"}\r\n                                            onClick={event => {\r\n                                                event.stopPropagation();\r\n                                                event.preventDefault();\r\n                                                alert(\"Button clicked\");\r\n                                            }}\r\n                                            disabled={redo}\r\n                                        >\r\n                                            <RedoIcon fontSize={\"small\"}/>\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                                <Grid item xs={4} className={classes.cancelButton}>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </ClickAwayListener>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className={classes.root}>\r\n                    <InputBase\r\n                        className={classes.input}\r\n                        placeholder={t('TakeNote')}\r\n                        inputProps={{'aria-label': t('TakeNote')}}\r\n                        onSelect={() => {\r\n                            handleOnChangeTakeNote()\r\n                        }}\r\n                    />\r\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"search\">\r\n                        <FormatListNumberedIcon/>\r\n                    </IconButton>\r\n                    <Divider className={classes.divider} orientation=\"vertical\"/>\r\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"directions\">\r\n                        <BorderColorIcon/>\r\n                    </IconButton>\r\n                    <Divider className={classes.divider} orientation=\"vertical\"/>\r\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"search\">\r\n                        <ImageIcon/>\r\n                    </IconButton>\r\n                </div>\r\n\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" maxWidth={\"sm\"}\r\n                PaperProps={{style: {backgroundColor: color}}}\r\n                classes={{paperFullWidth: classes.paperFullWidth, paper: classes.paperFullWidthMargin}} fullWidth={true}\r\n                open={open}>\r\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                {t('AddBook')}\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n                {handleGetDetailedNoteArea()}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button autoFocus onClick={handleSaveBook} color=\"primary\" variant={\"contained\"}>\r\n                    <Typography>\r\n                        {t('Save')}\r\n                    </Typography>\r\n                </Button>\r\n                <Button autoFocus onClick={handleClose} color=\"primary\" variant={\"contained\"}>\r\n                    <Typography>\r\n                        {t('Cancel')}\r\n                    </Typography>\r\n                </Button>\r\n            </DialogActions>\r\n            <ColorSelectorModal ref={childRef} setColor={setColor}/>\r\n        </Dialog>\r\n    );\r\n})\r\n\r\n","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Styles\\NoteDetailModalStyle.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\state\\actionTypes.js",[],"C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\Modals\\Notification.js",["175","176"],"import AppContentStyle from \"../Styles/AppContentStyle\";\nimport React, {forwardRef, useImperativeHandle} from \"react\";\nimport {Snackbar} from \"@material-ui/core\";\nimport {Alert} from \"@material-ui/lab\";\n\nexport const Notification = forwardRef((props, ref) => {\n    useImperativeHandle(\n        ref,\n        () => ({\n            handleClickOpenWithRef(duration, message, severity) {\n                setOpen(true);\n                setDuration(duration);\n                setMessage(message);\n                setSeverity(severity);\n            }\n        }),\n    )\n    const [open, setOpen] = React.useState(false);\n    const [duration, setDuration] = React.useState(2000);\n    const [message, setMessage] = React.useState(\"\");\n    const [severity, setSeverity] = React.useState(\"\");\n    const classes = AppContentStyle();\n    const [state, setState] = React.useState({\n        vertical: 'top',\n        horizontal: 'center',\n    });\n\n    const {vertical, horizontal} = state;\n\n    const handleClick = (newState) => () => {\n        setState({open: true, ...newState});\n    };\n\n\n    return (\n        <Snackbar\n            autoHideDuration={duration}\n            anchorOrigin={{vertical, horizontal}}\n            open={open}\n            key={vertical + horizontal}\n        >\n            <Alert      onClose={() => {\n                setOpen(false)}} severity={severity}>{message}</Alert>\n        </Snackbar>\n    );\n})\n","C:\\Users\\talat.farimaz\\IdeaProjects\\TakeNote\\frontend\\src\\enums\\NotificationTypes.js",[],{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":3,"column":10,"nodeType":"183","messageId":"184","endLine":3,"endColumn":14},{"ruleId":"181","severity":1,"message":"185","line":4,"column":9,"nodeType":"183","messageId":"184","endLine":4,"endColumn":18},{"ruleId":"181","severity":1,"message":"186","line":6,"column":9,"nodeType":"183","messageId":"184","endLine":6,"endColumn":15},{"ruleId":"181","severity":1,"message":"187","line":6,"column":17,"nodeType":"183","messageId":"184","endLine":6,"endColumn":21},{"ruleId":"181","severity":1,"message":"188","line":7,"column":8,"nodeType":"183","messageId":"184","endLine":7,"endColumn":16},{"ruleId":"181","severity":1,"message":"189","line":46,"column":11,"nodeType":"183","messageId":"184","endLine":46,"endColumn":26},{"ruleId":"190","severity":1,"message":"191","line":9,"column":1,"nodeType":"192","endLine":20,"endColumn":2},{"ruleId":"181","severity":1,"message":"189","line":41,"column":11,"nodeType":"183","messageId":"184","endLine":41,"endColumn":26},{"ruleId":"181","severity":1,"message":"193","line":1,"column":9,"nodeType":"183","messageId":"184","endLine":1,"endColumn":14},{"ruleId":"181","severity":1,"message":"194","line":2,"column":8,"nodeType":"183","messageId":"184","endLine":2,"endColumn":20},{"ruleId":"181","severity":1,"message":"189","line":51,"column":11,"nodeType":"183","messageId":"184","endLine":51,"endColumn":26},{"ruleId":"181","severity":1,"message":"195","line":59,"column":11,"nodeType":"183","messageId":"184","endLine":59,"endColumn":25},{"ruleId":"181","severity":1,"message":"196","line":31,"column":8,"nodeType":"183","messageId":"184","endLine":31,"endColumn":25},{"ruleId":"181","severity":1,"message":"197","line":38,"column":18,"nodeType":"183","messageId":"184","endLine":38,"endColumn":25},{"ruleId":"181","severity":1,"message":"198","line":39,"column":18,"nodeType":"183","messageId":"184","endLine":39,"endColumn":25},{"ruleId":"181","severity":1,"message":"199","line":41,"column":12,"nodeType":"183","messageId":"184","endLine":41,"endColumn":20},{"ruleId":"181","severity":1,"message":"200","line":41,"column":22,"nodeType":"183","messageId":"184","endLine":41,"endColumn":33},{"ruleId":"181","severity":1,"message":"201","line":42,"column":12,"nodeType":"183","messageId":"184","endLine":42,"endColumn":16},{"ruleId":"181","severity":1,"message":"202","line":43,"column":22,"nodeType":"183","messageId":"184","endLine":43,"endColumn":33},{"ruleId":"181","severity":1,"message":"197","line":63,"column":18,"nodeType":"183","messageId":"184","endLine":63,"endColumn":25},{"ruleId":"181","severity":1,"message":"198","line":64,"column":18,"nodeType":"183","messageId":"184","endLine":64,"endColumn":25},{"ruleId":"181","severity":1,"message":"203","line":22,"column":11,"nodeType":"183","messageId":"184","endLine":22,"endColumn":18},{"ruleId":"181","severity":1,"message":"204","line":30,"column":11,"nodeType":"183","messageId":"184","endLine":30,"endColumn":22},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'LeftMenu' is defined but never used.","'handleClickOpen' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'alpha' is defined but never used.","'DefaultTheme' is defined but never used.","'handleSaveBook' is assigned a value but never used.","'NotificationTypes' is defined but never used.","'setRedo' is assigned a value but never used.","'setUndo' is assigned a value but never used.","'category' is assigned a value but never used.","'setCategory' is assigned a value but never used.","'book' is assigned a value but never used.","'setBookList' is assigned a value but never used.","'classes' is assigned a value but never used.","'handleClick' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]